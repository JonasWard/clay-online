{"version":3,"sources":["geometry/to-three.js","geometry/shaders-materials.js","geometry/importing-jsts.js","geometry/three/three-poly-line.js","geometry/clayBrick/clay-pattern-curve.js","geometry/jsts2Three/jsts-to-three.js","geometry/jsts2Three/three-to-jsts.js","geometry/clayBrick/clay-patterns.js","geometry/clayBrick/clay-simple-base.js","geometry/test-geo.js","three-setup/renderers.js","three-setup/render-loops.js","three-setup/set-up.js","three-setup/cameras.js","three-setup/orbit-controls.js","Viewer.js","three-setup/gui-setup.js","App.js","reportWebVitals.js","index.js","geometry/clayBrick/clay-point.js"],"names":["TubeGeo","path","segs","radius","radSegs","closed","material","geo","TubeGeometry","Mesh","shaders","vertexShader","fragmentShader","transparent","uniforms","extensions","derivatives","triangulationFromPolygon","polygon","builder","DelaunayTriangulationBuilder","setSites","setTolerance","getTriangles","GeometryFactory","edgesFromTriangulation","triangulation","vertexDict","vPairs","pureVertices","boundary","_geometries","coords","getGeometryN","getCoordinates","length","cMap","idx","coor","coordinate","JSON","stringify","x","y","z","dictCount","Object","keys","Vector3","a","b","v0","Math","min","v1","max","idxVertex","v","lines","localLineCurve","LineCurve","push","bufferFromTriangulation","bufferGeo","BufferGeometry","coordinatesList","vertices","Float32Array","setAttribute","BufferAttribute","computeVertexNormals","createBuffer","geom","segments","BufferOp","bufferOp","geometriesDifference","geosA","geosB","difference","geometriesIntersection","intersection","geometryUnion","geos","collection","createGeometryCollection","union","geometriesUnion","UnaryUnionOp","multiplePoints","strings","reader","WKTReader","aString","read","readWKString","bufferedGeos","displayPointTest","plg","buffer","edges","triangulatePolyline","CustomSinCurve","scale","t","optionalTarget","tx","ty","sin","PI","tz","set","multiplyScalar","this","Curve","Polyline","points","init","dirs","getDirs","arcLengthDivisions","getPointCount","dirList","i","vDir","subVectors","lengths","getLengths","cacheArcLengths","needsUpdate","previous","u","getTangent","vT","locT","roundT","isNaN","copy","normalize","addVectors","normal","tangents","normals","binormals","vec","mat","Matrix4","getTangentAt","Number","MAX_VALUE","abs","crossVectors","clone","EPSILON","theta","acos","clamp","dot","applyMatrix4","makeRotationAxis","t0","getPoint","_tConstraining","addScaledVector","height","point","periods","amplitude","step","phase","ClayPatternCurve","clayPoints","coordinates","pt","toCoordinate","createPolygon","positions","toVector3","patternFunction","parameters","uv","uvValue","origin","createLinearRing","vectorFromCoordinate","locZ","linearRingToPolyline","linearRing","vectors","pop","polygonToPolylines","polylines","constructor","name","pg","pl","lrs","linearRings","getExteriorRing","getNumInteriorRing","getInteriorRingN","getLinearRings","lr","polylineToPolygon","polyline","vector3","Coordinate","coordinatesFromPolyline","sinWaveUVPattern","phaseDelta","frequency","offset","DEFAULT_SIN_WAVE_UV_PARAMETERS","productionWidth","require","ClayPoint","pinRadiusAtHeight","arcClayPt","startPhase","angleDelta","basePoint","vVal","baseAngle","angle","x0","cos","y0","clayPoint","Vector2","arcDivisions","goalLength","arcAngle","count","ceil","lineDivisions","distanceTo","delta","deltaLength","outerProfile","baseWidth","p0","p1","p2","p3","clayPolyline","simpleLineDivison","divisions","withEnds","vs","start","end","simpleArcDivision","baseV","division","diamondPolyline","bPoint","diamondWidth","diamondHeight","rectangle","width","innerProfileGeom","pinSpacing","diamondVs","diamondCount","pls","diamondV","diamond","diamondRect","pinDiameter","baseLength","polygons","aSlice","outerClayCurve","console","log","applyPattern","outerGeom","toPolygon","bufferedOuterGeom","recL","leftRec","leftRecPg","unionOuterGeom","innerGeom","moveToHeight","shaderMaterialEdges","ShaderMaterial","geoTubeTest","blWhiteShader","tubes","makeMeWave","addTestGeos","scene","add","testTube","locTubeGeo","clayPointTest","pts","testClayCurve","tube","resize","mount","renderer","camera","current","clientWidth","clientHeight","aspect","updateProjectionMatrix","setSize","frameId","requestAnimationFrame","animate","clear","render","setUp","Scene","WebGL1Renderer","antialias","alpha","setClearColor","setPixelRatio","window","devicePixelRatio","getPerspectiveRenderer","appendChild","domElement","PerspectiveCamera","position","getPerspectiveCamera","orbitControls","OrbitControls","enableRotate","enableKeys","target","update","getOrbitControls","cleanUp","cancelAnimationFrame","stop","removeChild","Viewer","useRef","rendererRef","cameraRef","useEffect","gui","GUI","exportUSDZ","usdz","createGUI","bounds","onResize","measureRef","className","ref","tabIndex","App","id","rel","href","download","src","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById","direction","value","vBase","move"],"mappings":"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","file":"static/js/main.2684e126.chunk.js","sourcesContent":["import {\n    Mesh,\n    TubeGeometry\n} from \"three\";\n\nexport function TubeGeo(path, segs, radius, radSegs, closed, material) {\n    const geo = new TubeGeometry(path, segs, radius, radSegs, closed);\n    return new Mesh(geo, material);\n}\n","export const shaders = {\n    normalShader: {\n        vertexShader: `\n            varying vec3 v_Normal;\n            void main() {\n                v_Normal = normal;\n                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n            }`,\n        fragmentShader: `\n            varying vec3 v_Normal;\n            void main() {\n                gl_FragColor = vec4(v_Normal * .8, .8);\n                // vec3 grid = abs(fract(coord - 0.5) - 0.5) / fwidth(coord);\n    \n            }`,\n        transparent: true,\n        uniforms: {}\n    },\n\n    smokeShader: {\n        fragmentShader: `\n            uniform vec2 res;\n            uniform sampler2D bufferTexture;\n            uniform vec3 smokeSource;\n            \n            void main() {\n                vec2 pixel = gl_FragCoord.xy / res.xy;\n                gl_FragColor = texture2D( bufferTexture, pixel );\n            \n                //Get the distance of the current pixel from the smoke source\n                float dist = distance(smokeSource.xy,gl_FragCoord.xy);\n                //Generate smoke when mouse is pressed\n                gl_FragColor.rgb += smokeSource.z * max(15.0-dist,0.0);\n            \n                //Smoke diffuse\n                float xPixel = 1.0/res.x;//The size of a single pixel\n                float yPixel = 1.0/res.y;\n                vec4 rightColor = texture2D(bufferTexture,vec2(pixel.x+xPixel,pixel.y));\n                vec4 leftColor = texture2D(bufferTexture,vec2(pixel.x-xPixel,pixel.y));\n                vec4 upColor = texture2D(bufferTexture,vec2(pixel.x,pixel.y+yPixel));\n                vec4 downColor = texture2D(bufferTexture,vec2(pixel.x,pixel.y-yPixel));\n                //Diffuse equation\n                gl_FragColor.rgb += 14.0 * 0.016 * (leftColor.rgb + rightColor.rgb + downColor.rgb + upColor.rgb - 4.0 * gl_FragColor.rgb);\n            }`\n    },\n\n    gridNormal: {\n        vertexShader: `\n            varying vec3 v_Position;\n            varying vec3 v_Normal;\n            void main() {\n                v_Position = position;\n                v_Normal = normal;\n                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n            }`,\n        fragmentShader: `\n            varying vec3 v_Position;\n            varying vec3 v_Normal;\n            void main() {\n                vec3 grid = abs(fract(v_Position - 0.5) - 0.5) / fwidth(v_Position);\n                float line = min(min(grid.x, grid.y), grid.z);\n                float value = 3.- min(line,3.);\n                float transparency = .1 + value * .9;\n            \n                gl_FragColor = vec4(v_Normal * value, transparency);\n                // vec3 grid = abs(fract(coord - 0.5) - 0.5) / fwidth(coord);\n            }`,\n        transparent: true,\n        uniforms: {},\n        extensions: {derivatives: true}\n    },\n\n    grid: {\n        vertexShader: `\n            varying vec3 v_Position;\n            void main() {\n                v_Position = position;\n                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n            }`,\n        fragmentShader: `\n            varying vec3 v_Position;\n            void main() {\n                vec3 grid = abs(fract(v_Position - .5) - .5) / fwidth(v_Position);\n                float line = min(min(grid.x, grid.y), grid.z);\n                float value = 2.5- min(line, 2.5);\n                float transparency = .1 + value * .9;\n\n                gl_FragColor = vec4(vec3(0.), transparency);\n                // vec3 grid = abs(fract(coord - 0.5) - 0.5) / fwidth(coord);\n            }`,\n        transparent: true,\n        uniforms: {},\n        extensions: {derivatives: true}\n    },\n\n    zGrid: {\n        vertexShader: `\n            varying float z_Position;\n            varying vec3 v_Normal;\n            void main() {\n                z_Position = position.z;\n                v_Normal = normal;\n                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n            }`,\n        fragmentShader: `\n            varying float z_Position;\n            varying vec3 v_Normal;\n            void main() {\n                float line = abs(fract(z_Position - 0.5) - 0.5) / fwidth(z_Position);\n                float value = 3.- min(line,3.);\n                float transparency = .1 + value * .9;\n    \n                gl_FragColor = vec4(v_Normal * value, transparency);\n                // vec3 grid = abs(fract(coord - 0.5) - 0.5) / fwidth(coord);\n            }`,\n        transparent: true,\n        uniforms: {},\n        extensions: {derivatives: true}\n    },\n\n    edges: {\n        vertexShader: `\n            attribute vec2 barycentric;\n            varying vec2 b;\n            void main () {\n                b = barycentric;\n                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n            }`,\n        fragmentShader: `\n            // float gridFactor (vec2 vBC, float width, float feather) {\n            //     float w1 = width - feather * 0.5;\n            //     vec3 bary = vec3(vBC.x, vBC.y, 1.0 - vBC.x - vBC.y);\n            //     vec3 d = fwidth(bary);\n            //     vec3 a3 = smoothstep(d * w1, d * (w1 + feather), bary);\n            //    \n            //     return min(min(a3.x, a3.y), a3.z);\n            // }\n            \n            float gridFactor (vec2 vBC, float width) {\n                vec3 bary = vec3(vBC.x, vBC.y, 1.0 - vBC.x - vBC.y);\n                vec3 d = fwidth(bary);\n                vec3 a3 = smoothstep(d * (width - 0.5), d * (width + 0.5), bary);\n                \n                return min(min(a3.x, a3.y), a3.z);\n            }\n            \n            varying vec2 b;\n            \n            void main () {\n                gl_FragColor = vec4(vec3(gridFactor(b, 1.0) * .6), 1);\n            }`,\n        transparent: true,\n        extensions: {derivatives: true}\n    }\n}\n","import {DelaunayTriangulationBuilder} from \"jsts/org/locationtech/jts/triangulate\";\nimport {WKTReader} from \"jsts/org/locationtech/jts/io\";\nimport BufferOp from \"jsts/org/locationtech/jts/operation/buffer/BufferOp\";\nimport {Geometry, GeometryCollection, GeometryFactory} from \"jsts/org/locationtech/jts/geom\";\nimport \"jsts/org/locationtech/jts/monkey.js\";\nimport {BufferAttribute, BufferGeometry, LineCurve, Vector3} from \"three\";\nimport {CustomLine} from \"./test-geo\";\nimport {UnaryUnionOp} from \"jsts/org/locationtech/jts/operation/union\";\n\nfunction triangulationFromPolygon(polygon) {\n    const builder = new DelaunayTriangulationBuilder();\n\n    builder.setSites(polygon);\n    builder.setTolerance(.01);\n\n    let triangulation = builder.getTriangles(new GeometryFactory());\n\n    // console.log(triangulation);\n\n    return triangulation;\n}\n\nfunction polygonToBufferGeometry(polygon) {\n    const triangulation = triangulationFromPolygon(polygon);\n    return bufferFromTriangulation(triangulation);\n}\n\nfunction edgesFromTriangulation(triangulation) {\n    let vertexDict = {};\n    let vPairs = {};\n    let pureVertices = {};\n\n    for (const boundary in triangulation._geometries) {\n        const bnd = triangulation.getGeometryN(boundary);\n        const coords = bnd.getCoordinates();\n\n        if (coords.length === 4) {\n            let cMap = [0, 0, 0];\n            for (const idx in [0,1,2]) {\n                const coor = coords[idx];\n\n                let coordinate = JSON.stringify({x: coor.x, y: coor.y, z: .1});\n\n                const dictCount = Object.keys(vertexDict).length;\n\n                if (!(coordinate in vertexDict)) {\n                    // console.log(coordinate);\n\n                    vertexDict[coordinate] = dictCount;\n                    pureVertices[coordinate] = new Vector3(coor.x, coor.y, .1);\n                    cMap[idx] = dictCount;\n                } else {\n                    cMap[idx] = vertexDict[coordinate];\n                }\n            }\n\n            // console.log(cMap);\n\n            for (const idx in [0,1,2]) {\n                let a = cMap[idx];\n                let b = cMap[(idx + 1) % 3];\n\n                let v0 = Math.min(a, b);\n                let v1 = Math.max(a, b);\n\n                vPairs[JSON.stringify([v0, v1])] = [v0, v1];\n            }\n        }\n    }\n\n    let idxVertex = {};\n    for(const v in vertexDict){\n        const idx = vertexDict[v];\n        idxVertex[idx] = pureVertices[v];\n    }\n\n    let lines = [];\n\n    for (const idx in vPairs) {\n        // console.log(vPairs[idx]);\n\n        const a = vPairs[idx][0];\n        const b = vPairs[idx][1];\n\n        // console.log(vPairs);\n        // console.log(a, b);\n        // console.log(idxVertex[a], idxVertex[b]);\n\n        const localLineCurve = new LineCurve(idxVertex[a], idxVertex[b]);\n\n        // localLineCurve.arcLengthDivisions = 1;\n\n        lines.push(localLineCurve);\n    }\n\n    return lines;\n}\n\nfunction bufferFromTriangulation(triangulation) {\n    // let geoCollection = new GeometryCollection();\n\n    let bufferGeo = new BufferGeometry();\n    let coordinatesList = [];\n\n    for (const boundary in triangulation._geometries) {\n        const bnd = triangulation.getGeometryN(boundary);\n        const coords = bnd.getCoordinates();\n\n        if (coords.length === 4) {\n            for (const idx in [0,1,2]) {\n                const coor = coords[idx];\n                coordinatesList.push(coor.x);\n                coordinatesList.push(coor.y);\n                coordinatesList.push(.1);\n            }\n        }\n    }\n\n    const vertices = new Float32Array( coordinatesList );\n\n    bufferGeo.setAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n    bufferGeo.computeVertexNormals();\n\n    return bufferGeo;\n}\n\nexport function createBuffer(geom, radius, segments = 32) {\n    return BufferOp.bufferOp(geom, radius, segments);\n}\n\nexport function displayPoint(aString) {\n    let reader = new WKTReader();\n\n    let pt = reader.read(aString);\n\n    let buffered = createBuffer(pt, 20);\n\n    const triangulation = triangulationFromPolygon(buffered);\n\n    return {\n        buffer: bufferFromTriangulation(triangulation),\n        edges: edgesFromTriangulation(triangulation)\n    };\n}\n\nexport function geometriesUnion(geos) {\n    if (geos.length === 1){\n        return geos[0];\n    }\n\n    const geoFac = new GeometryFactory();\n    const geoCollection = geoFac.createGeometryCollection(geos).union();\n\n    return geoCollection;\n}\n\nexport function geometriesDifference(geosA, geosB) {\n    return geosA.difference(geosB);\n}\n\nexport function geometriesIntersection(geosA, geosB) {\n    return geosA.intersection(geosB);\n}\n\nexport function readWKString(strings) {\n    const reader = new WKTReader();\n    const geos = [];\n\n    for (const aString of strings) {\n        geos.push(reader.read(aString));\n    }\n\n    return geos;\n}\n\nexport function geometryUnion(geos) {\n    const collection = geometriesUnion(geos);\n\n    return UnaryUnionOp.union(collection);\n}\n\nexport function multiplePoints(){\n    const strings = [\n        'POINT (-20 0)',\n        'POINT (20 0)',\n        'POINT (0 15)'\n    ];\n\n    const geos = readWKString(strings);\n    let bufferedGeos = [];\n\n    for (const geo of geos) {\n        bufferedGeos.push(BufferOp.bufferOp(geo, 30, 100));\n    }\n\n    const geom = geometryUnion(bufferedGeos);\n\n    return geom;\n}\n\nexport function triangulatePolyline(plg) {\n    const triangulation = triangulationFromPolygon(plg);\n\n    return {\n        buffer: bufferFromTriangulation(triangulation),\n        edges: edgesFromTriangulation(triangulation)\n    };\n}\n\nexport function testPolygon() {\n    // let reader = new WKTReader();\n    //\n    // const pt = reader.read('POINT (0 0)');\n    // const buffer = BufferOp.bufferOp(pt, 30)\n\n    return multiplePoints();\n}\n\nexport function displayPointTest(){\n    return triangulatePolyline(multiplePoints());\n}\n","import {Curve, Matrix4, Vector3} from \"three\";\nimport {clamp} from \"three/src/math/MathUtils\";\n\nexport class CustomSinCurve extends Curve {\n\n    constructor( scale = 1 ) {\n\n        super();\n\n        this.scale = scale;\n\n    }\n\n    getPoint( t, optionalTarget = new Vector3() ) {\n\n        const tx = t * 3 - 1.5;\n        const ty = Math.sin( 2 * Math.PI * t );\n        const tz = 0;\n\n        return optionalTarget.set( tx, ty, tz ).multiplyScalar( this.scale );\n    }\n}\n\nexport class CustomLine extends Curve {\n\n    constructor(v0, v1) {\n        super();\n\n        this.v0 = v0;\n        this.vDir = v1 - this.v0;\n\n        this.scale = 1.;\n    }\n\n    getPoint(t, optionalTarget = new Vector3()) {\n        const v = this.v0 + t * this.vDir;\n        // console.log(v);\n\n        return optionalTarget.set(v.x, v.y, v.z).multiplyScalar( this.scale );\n    }\n}\n\nexport class Polyline extends Curve {\n    constructor(points, closed = true) {\n        super();\n\n        this.points = points;\n        this.closed = closed;\n\n        this.init();\n    }\n\n    init() {\n        this.dirs = this.getDirs();\n\n        this.arcLengthDivisions = this.getPointCount();\n    }\n\n    getPointCount() {\n        if (this.closed) {\n            return this.points.length;\n        } else {\n            return this.points.length - 1;\n        }\n    }\n\n    getDirs() {\n        let dirList = [];\n\n        for (let i = 0; i < this.getPointCount(); i++) {\n            const v0 = this.points[i];\n            const v1 = this.points[(i+1) % this.getPointCount()];\n\n            const vDir = new Vector3().subVectors(v1, v0);\n\n            dirList.push(vDir);\n        }\n\n        return dirList;\n    }\n\n    getLength() {\n        const lengths = this.getLengths();\n        return lengths[lengths.length - 1];\n    }\n\n    getLengths() {\n        if ( this.cacheArcLengths &&\n            ( this.cacheArcLengths.length === this.getPointCount() + 1 ) &&\n            ! this.needsUpdate ) {\n\n            return this.cacheArcLengths;\n        }\n\n        let previous = 0.;\n        this.cacheArcLengths = [previous];\n\n        for (const dir of this.dirs) {\n            previous += dir.length();\n            this.cacheArcLengths.push(previous);\n        }\n\n        return this.cacheArcLengths;\n    }\n\n    getTangentAt(u, optionalTarget = new Vector3()) {\n        return this.getTangent(u * this.getPointCount(), optionalTarget)\n    }\n\n    getTangent(t, optionalTarget = new Vector3()) {\n        const locT = t % 1.;\n        let roundT = t - t % 1.;\n\n        if (isNaN(t)) {\n            return null;\n        }\n\n        let vT;\n\n        if (t > 0 && t < this.getPointCount()) {\n            if ( locT < .0001 ) {\n                const v1 = new Vector3().copy(this.dirs[roundT]);\n                const v0 = new Vector3().copy(this.dirs[roundT - 1]);\n\n                v0.normalize();\n                v1.normalize();\n\n                vT = new Vector3().addVectors(v0, v1);\n            } else {\n                vT = new Vector3().copy(this.dirs[roundT]);\n            }\n        }\n\n        if (this.closed) {\n            roundT %= this.getPointCount();\n\n            if ( locT < .0001 ) {\n                const v1 = new Vector3().copy(this.dirs[roundT]);\n                const v0 = new Vector3().copy(this.dirs[(roundT + this.getPointCount() - 1) % this.getPointCount()]);\n\n                v0.normalize();\n                v1.normalize();\n\n                vT = new Vector3().addVectors(v0, v1);\n            } else {\n                vT = new Vector3().copy(this.dirs[roundT]);\n            }\n        } else {\n            if (t < 1) {\n                vT = new Vector3().copy(this.dirs[0]);\n            } else {\n                vT = new Vector3().copy(this.dirs[this.dirs.length - 1]);\n            }\n        }\n\n        vT.normalize();\n        return optionalTarget.set(vT.x, vT.y, vT.z);\n    }\n\n    computeFrenetFrames( segments, closed ) {\n\n        // see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\n        const normal = new Vector3();\n\n        const tangents = [];\n        const normals = [];\n        const binormals = [];\n\n        const vec = new Vector3();\n        const mat = new Matrix4();\n\n        // compute the tangent vectors for each segment on the curve\n\n        for ( let i = 0; i <= segments; i ++ ) {\n\n            const u = i / segments;\n\n            tangents[ i ] = this.getTangentAt( u, new Vector3() );\n\n        }\n\n        // select an initial normal vector perpendicular to the first tangent vector,\n        // and in the direction of the minimum tangent xyz component\n\n        normals[ 0 ] = new Vector3();\n        binormals[ 0 ] = new Vector3();\n        let min = Number.MAX_VALUE;\n        const tx = Math.abs( tangents[ 0 ].x );\n        const ty = Math.abs( tangents[ 0 ].y );\n        const tz = Math.abs( tangents[ 0 ].z );\n\n        if ( tx <= min ) {\n\n            min = tx;\n            normal.set( 1, 0, 0 );\n\n        }\n\n        if ( ty <= min ) {\n\n            min = ty;\n            normal.set( 0, 1, 0 );\n\n        }\n\n        if ( tz <= min ) {\n\n            normal.set( 0, 0, 1 );\n\n        }\n\n        vec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n        normals[ 0 ].crossVectors( tangents[ 0 ], vec );\n        binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\n        // compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n        for ( let i = 1; i <= segments; i ++ ) {\n\n            normals[ i ] = normals[ i - 1 ].clone();\n\n            binormals[ i ] = binormals[ i - 1 ].clone();\n\n            vec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n            if ( vec.length() > Number.EPSILON ) {\n\n                vec.normalize();\n\n                const theta = Math.acos( clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n                normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n            }\n\n            binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n        }\n\n        // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n        if ( closed === true ) {\n\n            let theta = Math.acos( clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );\n            theta /= segments;\n\n            if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\n\n                theta = - theta;\n\n            }\n\n            for ( let i = 1; i <= segments; i ++ ) {\n\n                // twist a little...\n                normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n                binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n            }\n\n        }\n\n        // console.log({\n        //     tangents: tangents,\n        //     normals: normals,\n        //     binormals: binormals\n        // });\n\n        return {\n            tangents: tangents,\n            normals: normals,\n            binormals: binormals\n        };\n\n    }\n\n    _tConstraining(t) {\n        let locT = t % 1.;\n\n        let t0 = t - locT;\n\n        if (this.closed) {\n            t0 %= this.getPointCount();\n        } else {\n            if (t0 < 0) {\n                locT += t0;\n                t0 = 0;\n            } else if (t0 >= this.getPointCount()) {\n                locT += t0 - this.getPointCount();\n                t0 = this.getPointCount();\n            }\n        }\n\n        return {\n            locT: locT,\n            t0: t0\n        };\n    }\n\n    getPointAt(t, optionalTarget = new Vector3() ) {\n        return this.getPoint(t, optionalTarget);\n    }\n\n    getPoint( t, optionalTarget = new Vector3() ) {\n        t *= this.getPointCount();\n\n        const {locT, t0} = this._tConstraining(t);\n\n        const v0 = this.points[t0];\n        const vDir = this.dirs[t0];\n\n        const v = new Vector3().addVectors(v0, new Vector3().addScaledVector(vDir, locT));\n\n        return optionalTarget.set(v.x, v.y, v.z);\n    }\n\n    moveToHeight(height = 0.){\n        for (const point of this.points) {\n            point.z = height;\n        }\n    }\n\n    makeMeWave(periods = 2., amplitude = 5.) {\n        const step = (periods * 2. * Math.PI) / this.getPointCount();\n        let phase = 0.;\n\n        for (let i = 0; i < this.getPointCount(); i++ ) {\n            this.points[i].z += amplitude * Math.sin(phase);\n            phase += step;\n        }\n\n        this.init();\n    }\n}","import {GeometryFactory} from \"jsts/org/locationtech/jts/geom\";\nimport {ClayPoint} from './clay-point';\nimport {Vector3} from \"three\";\nimport {Polyline} from \"../three/three-poly-line\";\n\nexport class ClayPatternCurve {\n    clayPoints;\n\n    constructor(clayPoints) {\n        this.clayPoints = clayPoints;\n    }\n\n    toPolygon() {\n        let coordinates =[];\n\n        for (const pt of this.clayPoints) {\n            coordinates.push(pt.toCoordinate());\n        }\n\n        coordinates.push(coordinates[0]);\n\n        return new GeometryFactory().createPolygon(coordinates);\n    }\n\n    toPolyline() {\n        let positions = [];\n\n        for (const pt of this.clayPoints) {\n            positions.push(pt.toVector3());\n        }\n\n        return new Polyline(positions);\n    }\n\n    moveToHeight(height = 0.) {\n        for (const pt of this.clayPoints) {\n            pt.z = height;\n        }\n    }\n\n    applyPattern(patternFunction, parameters) {\n        if (parameters.uv) {\n            for (const pt of this.clayPoints) {\n                pt.set(patternFunction(pt.uvValue, parameters));\n            }\n        } else {\n            for (const pt of this.clayPoints) {\n                pt.set(patternFunction(pt.origin, parameters));\n            }\n        }\n    }\n}\n\nexport function testClayCurve(scene = null) {\n    let pts = [\n        new ClayPoint(\n            new Vector3(.5, .5, 0),\n            new Vector3(1, 1, 0),\n        ),\n        new ClayPoint(\n            new Vector3(-.5, .5, 0),\n            new Vector3(-1, 1, 0),\n        ),\n        new ClayPoint(\n            new Vector3(-.5, -.5, 0),\n            new Vector3(-1, -1, 0),\n        ),\n        new ClayPoint(\n            new Vector3(.5, -.5, 0),\n            new Vector3(1, -1, 0),\n        ),\n    ];\n\n    const clayCurve = new ClayPatternCurve(pts);\n\n    if (scene) {\n        // console.log(\"is not null?\");\n        // console.log(scene);\n\n\n\n    } else {\n        console.log(\"is null !!!\");\n    }\n}\n","import {GeometryFactory} from \"jsts/org/locationtech/jts/geom\";\nimport {Path, Vector3} from \"three\";\nimport {Polyline} from \"../three/three-poly-line\";\nimport {testPolygon} from \"../importing-jsts\";\n\nconst llr = new GeometryFactory().createLinearRing();\n\nfunction getLinearRings(polygon) {\n    let linearRings = [];\n    linearRings.push(polygon.getExteriorRing());\n\n    // console.log(polygon);\n\n    for (let i = 0; i < polygon.getNumInteriorRing(); i++) {\n        linearRings.push(polygon.getInteriorRingN(i));\n    }\n\n    return linearRings;\n}\n\nfunction vectorFromCoordinate(coordinate) {\n    let locZ;\n\n    if (isNaN(coordinate.z)) {\n        locZ = 0;\n    } else {\n        locZ = coordinate.z;\n    }\n\n    return new Vector3(\n        coordinate.x,\n        coordinate.y,\n        locZ\n    );\n}\n\nfunction linearRingToPolyline(linearRing) {\n    let vectors = [];\n\n    for (const coordinate of linearRing.getCoordinates()) {\n        vectors.push(vectorFromCoordinate(coordinate) );\n    }\n\n    vectors.pop();\n\n    return new Polyline(vectors);\n}\n\nexport function polygonToPolylines(polygon){\n    let polylines = [];\n\n    if (polygon.constructor.name === \"MultiPolygon\") {\n        for (const pg of polygon._geometries) {\n            for (const pl of polygonToPolylines(pg)){\n                polylines.push(pl);\n            }\n        }\n\n        return polylines;\n    }\n\n    const lrs = getLinearRings(polygon);\n\n    for (const lr of lrs){\n        polylines.push(linearRingToPolyline(lr));\n    }\n\n    return polylines;\n}\n","import {GeometryFactory} from \"jsts/org/locationtech/jts/geom\";\nimport Coordinate from \"jsts/org/locationtech/jts/geom/Coordinate\";\n\nfunction vector3toCoordinate(vector3) {\n    return new Coordinate(vector3.x, vector3.y, vector3.z);\n}\n\nfunction coordinatesFromPolyline(polyline) {\n    let coordinates = [];\n\n    for (const pt of polyline.points) {\n        coordinates.push(vector3toCoordinate(pt));\n    }\n\n    coordinates.push(coordinates[0]);\n\n    return coordinates;\n}\n\nexport function polylineToPolygon(polyline) {\n    const geoFactory = new GeometryFactory();\n\n    let coordinates = [];\n\n    const polygon = geoFactory.createPolygon(coordinatesFromPolyline(polyline));\n\n    return polygon;\n};","export function sinWaveUVPattern(uv, parameters){\n    const phase = parameters.phaseDelta * uv.y;\n    return Math.sin(uv.x * parameters.frequency + phase) * parameters.amplitude + parameters.offset;\n}\n\nexport const DEFAULT_SIN_WAVE_UV_PARAMETERS = {\n    amplitude: 2.,\n    frequency: 2. * Math.PI / 30.0,\n    phaseDelta: 1.,\n    offset: 5.,\n    uv: true\n};","// defining base parameters\n// all lengths are in mm\n// base height, width\n\nimport {ClayPatternCurve} from \"./clay-pattern-curve\";\nimport {Polyline} from \"../three/three-poly-line\";\nimport {polylineToPolygon} from \"../jsts2Three/three-to-jsts\";\nimport {createBuffer, geometriesDifference, geometriesIntersection, geometryUnion} from \"../importing-jsts\";\nimport {polygonToPolylines} from \"../jsts2Three/jsts-to-three\";\nimport {Vector2} from \"three\";\nimport {DEFAULT_SIN_WAVE_UV_PARAMETERS, sinWaveUVPattern} from \"./clay-patterns\";\n\nconst productionWidth = 2.5;\n\nconst {Vector3} = require(\"three\");\nconst {ClayPoint} = require(\"./clay-point\");\nconst baseWidth = 150.0;\nconst baseLength = 300.0; // always needs to be at least the same length as the brick's width\nconst lengthBufferMultiplier = 2.0;\n\nconst pinSpacing = 220.0;\nconst diamondWidth = 50.0;\nconst diamondHeight = 110.0;\nconst diamondCount = 3;\n\nconst pinDiameter0 = 40.0;\nconst pinDiameter1 = 20.0;\nconst pinDelta = 250.0;\nconst pinDiameterDelta = (pinDiameter1 - pinDiameter0) / pinDelta;\nconst pinDivisions = 60;\n\nconst precision = 5.0;\n\nconst bodyHeight = 160.0;\n\nfunction pinRadiusAtHeight(height) {\n    // console.log(pinDiameterDelta, height, pinDiameter0);\n    return pinDiameterDelta * height + pinDiameter0;\n}\n\nfunction arcClayPt(i, startPhase, angleDelta, radius, basePoint, vVal = 0.) {\n    const baseAngle = angleDelta * i;\n    const angle = startPhase + baseAngle;\n\n    const x0 = Math.cos(angle);\n    const y0 = Math.sin(angle);\n\n    const x = radius * x0;\n    const y = radius * y0;\n\n    const clayPoint = new ClayPoint(\n        new Vector3(basePoint.x + x, basePoint.y + y, basePoint.z),\n        new Vector3(x0, y0, 0)\n    );\n\n    clayPoint.uvValue = new Vector2(vVal + baseAngle * radius, basePoint.z);\n\n    return clayPoint\n}\n\nfunction arcDivisions(radius, goalLength, arcAngle, startPhase, basePoint, clayPoints, vVal = 0.) {\n    const count = Math.ceil(arcAngle * radius / goalLength);\n    const angleDelta = arcAngle / count;\n\n    for (let i = 0; i < count; i++) {\n        const clayPoint = arcClayPt(i, startPhase, angleDelta, radius, basePoint, vVal);\n        clayPoints.push(clayPoint);\n    }\n\n    return arcAngle * radius + vVal;\n}\n\nfunction lineDivisions(v0, v1, goalLength, clayPoints, vVal = 0.) {\n    const length = v0.distanceTo(v1);\n    const count = Math.ceil( length / goalLength);\n\n    const delta = new Vector3().addScaledVector(\n        new Vector3().subVectors(v1, v0),\n        1. / count\n    );\n\n    const deltaLength = delta.length();\n\n    const normal = new Vector3(delta.y / deltaLength, -delta.x / deltaLength);\n\n    for (let i = 0; i < count; i++) {\n        const v = new Vector3().addVectors(\n            v0,\n            new Vector3().addScaledVector(delta, i)\n        );\n\n        const clayPoint = new ClayPoint(v, normal);\n        clayPoint.uvValue = new Vector2(vVal + i * deltaLength, v0.z);\n        clayPoints.push(clayPoint);\n    }\n\n    return length + vVal;\n}\n\nexport function outerProfile(height = 0.) {\n    const v0 = new Vector3(-(baseLength - baseWidth) * .5, 0.0, height);\n    const v1 = new Vector3((baseLength - baseWidth) * .5, 0.0, height);\n\n    let clayPoints = [];\n\n    let vVal = 0.;\n\n    vVal = arcDivisions(baseWidth * .5, precision, Math.PI, .5 *Math.PI, v0, clayPoints, vVal);\n\n    const p0 = new Vector3(-(baseLength - baseWidth) * .5, -baseWidth * .5, height);\n    const p1 = new Vector3((baseLength - baseWidth) * .5, -baseWidth * .5, height);\n\n    vVal = lineDivisions(p0, p1, precision, clayPoints, vVal);\n\n    vVal = arcDivisions(baseWidth * .5, precision, Math.PI, -.5 *Math.PI, v1, clayPoints, vVal);\n\n    const p2 = new Vector3((baseLength - baseWidth) * .5, baseWidth * .5, height);\n    const p3 = new Vector3(-(baseLength - baseWidth) * .5, baseWidth * .5, height);\n\n    lineDivisions(p2, p3, precision, clayPoints, vVal);\n\n    const clayPolyline = new ClayPatternCurve(clayPoints);\n\n    return clayPolyline;\n}\n\nfunction simpleLineDivison(v0, v1, divisions, withEnds = false) {\n    const delta = new Vector3().addScaledVector(\n        new Vector3().subVectors(v1, v0),\n        1. / divisions\n    );\n\n    let vs = [];\n\n    let start = 0;\n    let end = divisions + 1;\n\n    if (!withEnds) {\n        start = 1;\n        end = divisions;\n    }\n\n    for (let i = start; i < end; i++) {\n        const v = new Vector3().addVectors(\n            v0,\n            new Vector3().addScaledVector(delta, i)\n        );\n\n        vs.push(v);\n    }\n\n    return vs;\n}\n\nfunction simpleArcDivision(baseV, radius, arcAngle = Math.PI, startPhase = 0., division = 100) {\n    const delta = arcAngle / division;\n\n    let vs = [];\n\n    for (let i = 0; i < division; i++) {\n        const angle = startPhase + i * delta;\n\n        const x = radius * Math.cos(angle);\n        const y = radius * Math.sin(angle);\n\n        vs.push(new Vector3(baseV.x + x, baseV.y + y, 0));\n    }\n\n    return new Polyline(vs);\n}\n\nfunction diamondPolyline(bPoint) {\n    return new Polyline([\n        new Vector3(bPoint.x + diamondWidth * .5, bPoint.y, 0),\n        new Vector3(bPoint.x, bPoint.y + diamondHeight * .5, 0),\n        new Vector3(bPoint.x - diamondWidth * .5, bPoint.y, 0),\n        new Vector3(bPoint.x, bPoint.y - diamondHeight * .5, 0)\n    ]);\n}\n\nfunction rectangle(bPoint, width, height) {\n    return new Polyline([\n        new Vector3(bPoint.x + width * .5, bPoint.y + .5 * height, 0),\n        new Vector3(bPoint.x - width * .5, bPoint.y + .5 * height, 0),\n        new Vector3(bPoint.x - width * .5, bPoint.y - .5 *  height, 0),\n        new Vector3(bPoint.x + width * .5, bPoint.y - .5 *  height, 0)\n    ]);\n}\n\nexport function innerProfileGeom(height = 0.) {\n    const v0 = new Vector3(-pinSpacing * .5, 0.0);\n    const v1 = new Vector3(pinSpacing * .5, 0.0);\n\n    const diamondVs = simpleLineDivison(v0, v1, diamondCount + 1, false);\n\n    let pls = [];\n\n    for (const diamondV of diamondVs) {\n        const diamond = diamondPolyline(diamondV);\n        const diamondRect = rectangle(diamondV, productionWidth, baseWidth * lengthBufferMultiplier);\n\n        pls.push(diamond);\n        pls.push(diamondRect);\n    }\n\n    const pinDiameter = pinRadiusAtHeight(height);\n\n    pls.push(simpleArcDivision(v0, pinDiameter * .5, 2. * Math.PI, 0., pinDivisions));\n    pls.push(simpleArcDivision(v1, pinDiameter * .5, 2. * Math.PI, 0., pinDivisions));\n    pls.push(rectangle(v0, productionWidth, baseWidth * lengthBufferMultiplier));\n    pls.push(rectangle(v1, productionWidth, baseWidth * lengthBufferMultiplier));\n    pls.push(rectangle(new Vector3(0, 0, 0),baseLength + baseWidth * (lengthBufferMultiplier - 1.), productionWidth));\n\n    let polygons = [];\n    for (const pl of pls){\n        polygons.push(polylineToPolygon(pl));\n    }\n\n    const geom = geometryUnion(polygons);\n\n    return geom;\n}\n\nexport function innerProfile(height = 0.) {\n    const geom = innerProfileGeom(height);\n\n    const polylines = polygonToPolylines(geom);\n\n    for (const pl of polylines) {\n        pl.moveToHeight(height);\n    }\n\n    return polylines;\n}\n\nexport function aSlice(height = 0., patternFunction, patternSettings) {\n    const outerClayCurve = outerProfile(height);\n\n    console.log(outerClayCurve);\n\n    // need to apply a certain pattern logic to it\n    // no pattern for now!\n    outerClayCurve.applyPattern(sinWaveUVPattern, DEFAULT_SIN_WAVE_UV_PARAMETERS);\n\n    const outerGeom = outerClayCurve.toPolygon();\n\n    const bufferedOuterGeom = createBuffer(outerGeom, -productionWidth, 1);\n\n    const recL = (baseLength + baseWidth * (lengthBufferMultiplier - 1.)) * .5;\n\n    // console.log(recL);\n\n    const leftRec = rectangle(\n        new Vector3(recL * .5, 0, 0),\n        recL,\n        productionWidth\n    );\n\n    // console.log(leftRec);\n\n    const leftRecPg = polylineToPolygon(leftRec);\n    const unionOuterGeom = geometryUnion([bufferedOuterGeom, leftRecPg])\n\n    const innerGeom = innerProfileGeom(height);\n\n    const geom = geometriesIntersection(unionOuterGeom, innerGeom);\n\n    const path = geometriesDifference(outerGeom, geom)\n\n    let polylines = polygonToPolylines(path);\n    // for (const pl of polygonToPolylines(outerGeom)) {\n    //     polylines.push(pl);\n    // }\n\n    for (const pl of polylines) {\n        pl.moveToHeight(height);\n    }\n    return polylines;\n}\n\n","import {\n    Curve,\n    // EdgesGeometry,\n    // CurveLine,\n    // LineBasicMaterial,\n    // LineSegments,\n    Matrix4,\n    Mesh,\n    ShaderMaterial,\n    // Vector2,\n    Vector3\n} from \"three\";\nimport {SpecialTubeGeo, TubeGeo} from \"./to-three\";\nimport {shaders} from \"./shaders-materials\";\nimport {displayPointTest, testPolygon} from \"./importing-jsts\";\nimport {clayPointTest} from \"./clayBrick/clay-point\";\nimport {testClayCurve} from \"./clayBrick/clay-pattern-curve\";\nimport {polygonToPolylines} from \"./jsts2Three/jsts-to-three\";\nimport {aSlice, innerProfile, outerProfile} from \"./clayBrick/clay-simple-base\";\nimport {CustomSinCurve} from \"./three/three-poly-line\";\n\nfunction shaderMaterialEdges() {\n    return new ShaderMaterial( shaders.grid );\n}\n\nexport function shaderNormal() {\n    return new ShaderMaterial(shaders.normalShader);\n}\n\nexport function testTube() {\n    // const material = new MeshBasicMaterial( { color: 0xff2211 } );\n    const material = shaderMaterialEdges();\n    const path = new CustomSinCurve( 10 );\n\n    return TubeGeo(path, 100, 2., 32, false, material);\n}\n\nexport function testJSTSTriangulation(scene) {\n    const {buffer, edges} = displayPointTest();\n    const material = shaderMaterialEdges();\n\n    const mesh = new Mesh(buffer, material);\n\n    const blWhiteShader = new ShaderMaterial(shaders.normalShader);\n\n    for (const line in edges) {\n        const aLine = edges[line];\n\n        // console.log(aLine);\n\n        const locTubeGeo = TubeGeo(aLine, 32, .5, 32, false, blWhiteShader);\n\n        // console.log(locTubeGeo);\n        scene.add(locTubeGeo);\n    }\n\n    scene.add(mesh);\n}\n\nexport function geoTubeTest() {\n    const polygon = testPolygon();\n    const pls = polygonToPolylines(polygon);\n\n    const blWhiteShader = new ShaderMaterial(shaders.normalShader);\n\n    let tubes = [];\n    for (const pl of pls) {\n        pl.makeMeWave(4., 10.);\n        tubes.push(TubeGeo(pl, pl.getPointCount(), .5, 6, false, blWhiteShader))\n    }\n\n    return tubes;\n}\n\n\nexport function addTestGeos(scene) {\n    scene.add(testTube());\n\n    //\n    // basePl.makeMeWave(4., 10.);\n\n\n\n    for (let i = 1.25; i < 160.; i += 2.5) {\n        for (const pl of aSlice(i)) {\n            const locTubeGeo = TubeGeo(pl, pl.getPointCount(), 1.5, 6, false, shaderNormal());\n            scene.add(locTubeGeo);\n        }\n    }\n\n\n    clayPointTest();\n    testClayCurve(scene);\n\n    for (const tube of geoTubeTest()) {\n        scene.add(tube);\n    }\n}\n","import {WebGL1Renderer, WebGLRenderer} from 'three'\n\nexport function getPlanarRenderer() {\n    const renderer = new WebGLRenderer({antialias: true});\n\n    renderer.setClearColor('#cdd0d6');\n    renderer.setPixelRatio(window.devicePixelRatio);\n\n    return renderer;\n}\n\nexport function getPerspectiveRenderer() {\n    const renderer = new WebGL1Renderer({antialias: true, alpha: true})\n\n    renderer.setClearColor('#ffff99');\n    renderer.setPixelRatio(window.devicePixelRatio);\n\n    return renderer;\n}\n\nexport function resize(mount, renderer, camera) {\n    if (!mount || !renderer || !camera)\n        return\n\n    const {clientWidth, clientHeight} = mount.current\n\n    if (camera) {\n        camera.aspect = clientWidth / clientHeight;\n        camera.updateProjectionMatrix();\n    }\n\n    renderer.setSize(clientWidth, clientHeight)\n}\n","export function start(renderer, scene, camera) {\n\n    const frameId = {frameId: null};\n\n    frameId.frameId = requestAnimationFrame(() => animate(renderer, scene, camera, frameId));\n\n    return frameId;\n}\n\nexport function stop({frameId}) {\n    return cancelAnimationFrame(frameId);\n}\n\nfunction animate(renderer, scene, camera, frameId) {\n    renderer.clear('#ddd');\n    renderer.render(scene, camera);\n\n    frameId.frameId = requestAnimationFrame(() => animate(renderer, scene, camera, frameId));\n}\n","import {Scene} from 'three';\nimport {getPerspectiveRenderer, resize} from \"./renderers\";\nimport {getOrbitControls} from \"./orbit-controls\";\nimport {getPerspectiveCamera} from \"./cameras\";\nimport {start, stop} from \"./render-loops\";\nimport {addTestGeos, testTube} from \"../geometry/test-geo\";\nimport {displayPointTest} from \"../geometry/importing-jsts\";\n\nexport function setUp(mount) {\n    const scene = new Scene();\n\n    addTestGeos(scene);\n\n    displayPointTest();\n\n    const renderer = getPerspectiveRenderer();\n    mount.current.appendChild(renderer.domElement);\n\n    const camera = getPerspectiveCamera(mount.current);\n    scene.add(camera);\n\n    const orbitControls = getOrbitControls(camera, renderer);\n\n    resize(mount, renderer, camera);\n    const frameId = start(renderer, scene, camera);\n\n    return {\n        scene: scene,\n        renderer: renderer,\n        camera: camera,\n        frameId: frameId,\n        orbitControls: orbitControls\n    };\n}\n\nexport function cleanUp(mount, renderer, frameId) {\n    stop(frameId.frameId);\n    mount.current.removeChild(renderer.domElement);\n}\n","import {OrthographicCamera, PerspectiveCamera} from 'three'\n\nexport function getOrthographicCamera(mount) {\n    const {clientWidth, clientHeight} = mount;\n\n    const camera = new OrthographicCamera(\n        clientWidth / -16,\n        clientWidth /16,\n        clientHeight / 16,\n        clientHeight / -16,\n        -1,\n        100\n    );\n\n    camera.enableRotate = false;\n    camera.position.z = 20;\n\n    return camera;\n}\n\nexport function getPerspectiveCamera(mount) {\n    const {clientWidth, clientHeight} = mount;\n\n    const camera = new PerspectiveCamera(\n        45,\n        clientWidth / clientHeight\n    );\n\n    camera.position.z = 20;\n    return camera;\n}\n","import {MOUSE} from 'three';\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\n\nexport function getOrbitControls(camera, renderer) {\n    const orbitControls = new OrbitControls(camera, renderer.domElement);\n    orbitControls.enableRotate = true;\n    orbitControls.enableKeys = true;\n    // orbitControls.minZoom = .5;\n    // orbitControls.maxZoom = 8;\n    // orbitControls.mouseButtons = {ZOOM: MOUSE.MIDDLE, PAN: MOUSE.RIGHT};\n\n    orbitControls.target.set(0, 0);\n    orbitControls.update();\n\n    return orbitControls;\n}\n\n","import React, {useEffect, useRef} from 'react';\nimport Measure from 'react-measure';\nimport {cleanUp, setUp} from \"./three-setup/set-up\";\nimport {resize} from \"./three-setup/renderers\";\nimport {GUI} from 'three/examples/jsm/libs/dat.gui.module';\nimport {createGUI} from \"./three-setup/gui-setup\";\n\nimport './Viewer.scss';\n\nfunction Viewer() {\n    const mount = useRef(null);\n    const rendererRef = useRef(null);\n    const cameraRef = useRef(null);\n\n    let gui;\n\n\n    useEffect(() => {\n        console.log(mount);\n\n        const {scene, camera, renderer, frameId} = setUp(mount);\n\n        rendererRef.current = renderer;\n        cameraRef.current = camera;\n\n        gui = createGUI(scene);\n\n        return () => {\n            cleanUp(mount, renderer, frameId);\n        }\n    }, [rendererRef, cameraRef]);\n\n    return (\n        <Measure\n            bounds\n            onResize={() => {\n                resize(mount, rendererRef.current, cameraRef.current)\n            }}>\n            {({measureRef}) => (\n                <div className={'simple-3d'} ref={measureRef}>\n                    <div className={'three-canvas'} ref={mount} tabIndex={0}/>\n                </div>\n            )}\n        </Measure>\n    )\n}\n\nexport default Viewer;\n","import {GUI} from \"three/examples/jsm/libs/dat.gui.module\";\nimport {USDZExporter} from \"three/examples/jsm/exporters/USDZExporter\";\n\nexport function createGUI(scene) {\n    const gui = new GUI();\n\n    const exportUSDZ = { usdz:function(){\n        console.log(\"export USDZ !?\");\n\n        // const exporter = new USDZExporter();\n        // const arrayBuffer = exporter.parse( scene, function ( ucsd ) {\n        //     console.log(ucsd);\n        //     console.log(\"nothing ?\");\n        //\n        // }, {} );\n        //\n        // const blob = new Blob( [ arrayBuffer ], { type: 'application/octet-stream' } );\n        //\n        // // console.log(ucsd);\n        // console.log(document);\n        //\n        // const link = document.getElementById( 'link' );\n        //\n        // console.log(link);\n        //\n        // link.href = URL.createObjectURL( blob );\n\n    }};\n\n    gui.add(exportUSDZ,'usdz');\n\n    return gui;\n}\n","// ... App.js\nimport React, {Component} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport {TestGeo} from \"./geometry/test-geo\";\nimport {setUp} from \"./three-setup/set-up\";\n\nimport './App.css';\nimport Viewer from \"./Viewer\";\n\nfunction App() {\n    return (\n        <div className={'app'}>\n            <div className={'container'}>\n                <Viewer/>\n            </div>\n            <a id=\"link\" rel=\"ar\" href=\"\" download=\"asset.usdz\">\n                <img id=\"button\" width=\"100\" src=\"files/arkit.png\"></img>\n            </a>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import {Vector3} from \"three\";\nimport {Coordinate} from \"jsts/org/locationtech/jts/geom\";\n\nexport class ClayPoint {\n    origin;\n    direction;\n    position;\n    uvValue;\n\n    constructor(origin, direction) {\n        this.origin = origin;\n        this.position = new Vector3().copy(origin);\n        this.direction = direction;\n    }\n\n    move(value) {\n        this.position = new Vector3().addVectors(\n            this.position,\n            new Vector3().addScaledVector(this.direction, value)\n        );\n    }\n\n    set(value) {\n        this.position = new Vector3().addVectors(\n            this.origin,\n            new Vector3().addScaledVector(this.direction, value)\n        );\n    }\n\n    toCoordinate() {\n        return new Coordinate(\n            this.position.x,\n            this.position.y,\n            this.position.z\n        )\n    }\n\n    toVector3() {\n        return new Vector3().copy(this.position);\n    }\n}\n\nexport function clayPointTest() {\n    const vBase = new Vector3(0, 0, 0);\n    const vDir = new Vector3(1, 0, 0);\n\n    const clayPoint = new ClayPoint(vBase, vDir);\n\n    clayPoint.move(1.);\n\n    clayPoint.set(10.);\n}\n"],"sourceRoot":""}