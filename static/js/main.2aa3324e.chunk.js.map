{"version":3,"sources":["geometry/to-three.js","geometry/shaders-materials.js","geometry/importing-jsts.js","geometry/clayBrick/clay-point.js","geometry/three/three-poly-line.js","geometry/clayBrick/clay-pattern-curve.js","geometry/jsts2Three/jsts-to-three.js","geometry/jsts2Three/three-to-jsts.js","geometry/clayBrick/clay-simple-base.js","geometry/test-geo.js","three-setup/renderers.js","three-setup/render-loops.js","geometry/clayBrick/clay-patterns.js","geometry/three/brick-to-scene.js","three-setup/set-up.js","three-setup/cameras.js","three-setup/orbit-controls.js","Viewer.js","three-setup/gui-setup.js","App.js","reportWebVitals.js","index.js"],"names":["TubeGeo","path","segs","radius","radSegs","closed","material","geo","TubeGeometry","Mesh","shaders","vertexShader","fragmentShader","transparent","uniforms","triangulationFromPolygon","polygon","builder","DelaunayTriangulationBuilder","setSites","setTolerance","getTriangles","GeometryFactory","edgesFromTriangulation","triangulation","vertexDict","vPairs","pureVertices","boundary","_geometries","coords","getGeometryN","getCoordinates","length","cMap","idx","coor","coordinate","JSON","stringify","x","y","z","dictCount","Object","keys","Vector3","a","b","v0","Math","min","v1","max","idxVertex","v","lines","localLineCurve","LineCurve","push","bufferFromTriangulation","bufferGeo","BufferGeometry","coordinatesList","vertices","Float32Array","setAttribute","BufferAttribute","computeVertexNormals","createBuffer","geom","segments","BufferOp","bufferOp","geometriesDifference","geosA","geosB","difference","geometriesIntersection","intersection","geometryUnion","geos","collection","createGeometryCollection","union","geometriesUnion","UnaryUnionOp","multiplePoints","strings","reader","WKTReader","aString","read","readWKString","bufferedGeos","displayPointTest","plg","buffer","edges","triangulatePolyline","ClayPoint","origin","direction","this","position","copy","value","addVectors","addScaledVector","Coordinate","Polyline","Curve","points","init","dirs","getDirs","arcLengthDivisions","getPointCount","dirList","i","vDir","subVectors","lengths","getLengths","cacheArcLengths","needsUpdate","previous","u","optionalTarget","getTangent","t","vT","locT","roundT","isNaN","normalize","set","normal","tangents","normals","binormals","vec","mat","Matrix4","getTangentAt","Number","MAX_VALUE","tx","abs","ty","tz","crossVectors","clone","EPSILON","theta","acos","clamp","dot","applyMatrix4","makeRotationAxis","t0","getPoint","_tConstraining","height","point","periods","amplitude","step","PI","phase","sin","pt","ClayPatternCurve","clayPoints","coordinates","toCoordinate","createPolygon","positions","toVector3","patternFunction","parameters","uv","uvValue","createLinearRing","vectorFromCoordinate","locZ","linearRingToPolyline","linearRing","vectors","pop","polygonToPolylines","polylines","constructor","name","pg","pl","lrs","linearRings","getExteriorRing","getNumInteriorRing","getInteriorRingN","getLinearRings","lr","polylineToPolygon","polyline","vector3","coordinatesFromPolyline","patternParameters","productionWidth","baseWidth","baseLength","lengthBufferMultiplier","pinSpacing","diamondWidth","diamondHeight","diamondCount","pinDiameter0","pinDiameter1","pinDelta","pinDiameterDelta","pinDivisions","precision","bodyHeight","totalHeight","startHeight","layerHeight","pinRadiusAtHeight","arcClayPt","startPhase","angleDelta","basePoint","vVal","baseAngle","angle","x0","cos","y0","clayPoint","Vector2","arcDivisions","goalLength","arcAngle","count","ceil","lineDivisions","distanceTo","delta","deltaLength","outerProfile","p0","p1","p2","p3","clayPolyline","simpleLineDivison","divisions","withEnds","vs","start","end","simpleArcDivision","baseV","division","diamondPolyline","bPoint","rectangle","width","innerProfileGeom","diamondVs","pls","diamondV","diamond","diamondRect","pinDiameter","polygons","aSlice","outerClayCurve","applyPattern","outerGeom","toPolygon","bufferedOuterGeom","recL","leftRec","leftRecPg","unionOuterGeom","innerGeom","aPinOnlySlice","arcA","arcB","cadFlip","constructBrick","overwrites","pattern","readingOverwrites","localH","moveToHeight","shaderNormal","ShaderMaterial","resize","mount","renderer","camera","current","clientWidth","clientHeight","aspect","updateProjectionMatrix","setSize","scene","frameId","requestAnimationFrame","animate","clear","render","sinWaveUVPattern","phaseDelta","frequency","offset","setUp","Scene","children","locTubeGeo","add","addBrick","WebGL1Renderer","antialias","alpha","setPixelRatio","window","devicePixelRatio","getPerspectiveRenderer","appendChild","domElement","PerspectiveCamera","getPerspectiveCamera","orbitControls","OrbitControls","enableRotate","enableKeys","target","update","getOrbitControls","cleanUp","cancelAnimationFrame","stop","removeChild","Viewer","useRef","rendererRef","cameraRef","useEffect","console","log","gui","GUI","exportUSDZ","usdz","createGUI","bounds","onResize","measureRef","className","ref","tabIndex","App","id","rel","href","download","src","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2aa3324e.chunk.js","sourcesContent":["import {\n    Mesh,\n    TubeGeometry\n} from \"three\";\n\nexport function TubeGeo(path, segs, radius, radSegs, closed, material) {\n    const geo = new TubeGeometry(path, segs, radius, radSegs, closed);\n    return new Mesh(geo, material);\n}\n","export const shaders = {\n    normalShader: {\n        vertexShader: `\n            varying vec3 v_Normal;\n            void main() {\n                v_Normal = normal;\n                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n            }`,\n        fragmentShader: `\n            varying vec3 v_Normal;\n            void main() {\n                gl_FragColor = vec4(v_Normal * .8, .8);\n                // vec3 grid = abs(fract(coord - 0.5) - 0.5) / fwidth(coord);\n    \n            }`,\n        transparent: true,\n        uniforms: {}\n    },\n\n    smokeShader: {\n        fragmentShader: `\n            uniform vec2 res;\n            uniform sampler2D bufferTexture;\n            uniform vec3 smokeSource;\n            \n            void main() {\n                vec2 pixel = gl_FragCoord.xy / res.xy;\n                gl_FragColor = texture2D( bufferTexture, pixel );\n            \n                //Get the distance of the current pixel from the smoke source\n                float dist = distance(smokeSource.xy,gl_FragCoord.xy);\n                //Generate smoke when mouse is pressed\n                gl_FragColor.rgb += smokeSource.z * max(15.0-dist,0.0);\n            \n                //Smoke diffuse\n                float xPixel = 1.0/res.x;//The size of a single pixel\n                float yPixel = 1.0/res.y;\n                vec4 rightColor = texture2D(bufferTexture,vec2(pixel.x+xPixel,pixel.y));\n                vec4 leftColor = texture2D(bufferTexture,vec2(pixel.x-xPixel,pixel.y));\n                vec4 upColor = texture2D(bufferTexture,vec2(pixel.x,pixel.y+yPixel));\n                vec4 downColor = texture2D(bufferTexture,vec2(pixel.x,pixel.y-yPixel));\n                //Diffuse equation\n                gl_FragColor.rgb += 14.0 * 0.016 * (leftColor.rgb + rightColor.rgb + downColor.rgb + upColor.rgb - 4.0 * gl_FragColor.rgb);\n            }`\n    },\n\n    gridNormal: {\n        vertexShader: `\n            varying vec3 v_Position;\n            varying vec3 v_Normal;\n            void main() {\n                v_Position = position;\n                v_Normal = normal;\n                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n            }`,\n        fragmentShader: `\n            varying vec3 v_Position;\n            varying vec3 v_Normal;\n            void main() {\n                vec3 grid = abs(fract(v_Position - 0.5) - 0.5) / fwidth(v_Position);\n                float line = min(min(grid.x, grid.y), grid.z);\n                float value = 3.- min(line,3.);\n                float transparency = .1 + value * .9;\n            \n                gl_FragColor = vec4(v_Normal * value, transparency);\n                // vec3 grid = abs(fract(coord - 0.5) - 0.5) / fwidth(coord);\n            }`,\n        transparent: true,\n        uniforms: {},\n        extensions: {derivatives: true}\n    },\n\n    grid: {\n        vertexShader: `\n            varying vec3 v_Position;\n            void main() {\n                v_Position = position;\n                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n            }`,\n        fragmentShader: `\n            varying vec3 v_Position;\n            void main() {\n                vec3 grid = abs(fract(v_Position - .5) - .5) / fwidth(v_Position);\n                float line = min(min(grid.x, grid.y), grid.z);\n                float value = 2.5- min(line, 2.5);\n                float transparency = .1 + value * .9;\n\n                gl_FragColor = vec4(vec3(0.), transparency);\n                // vec3 grid = abs(fract(coord - 0.5) - 0.5) / fwidth(coord);\n            }`,\n        transparent: true,\n        uniforms: {},\n        extensions: {derivatives: true}\n    },\n\n    zGrid: {\n        vertexShader: `\n            varying float z_Position;\n            varying vec3 v_Normal;\n            void main() {\n                z_Position = position.z;\n                v_Normal = normal;\n                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n            }`,\n        fragmentShader: `\n            varying float z_Position;\n            varying vec3 v_Normal;\n            void main() {\n                float line = abs(fract(z_Position - 0.5) - 0.5) / fwidth(z_Position);\n                float value = 3.- min(line,3.);\n                float transparency = .1 + value * .9;\n    \n                gl_FragColor = vec4(v_Normal * value, transparency);\n                // vec3 grid = abs(fract(coord - 0.5) - 0.5) / fwidth(coord);\n            }`,\n        transparent: true,\n        uniforms: {},\n        extensions: {derivatives: true}\n    },\n\n    edges: {\n        vertexShader: `\n            attribute vec2 barycentric;\n            varying vec2 b;\n            void main () {\n                b = barycentric;\n                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n            }`,\n        fragmentShader: `\n            // float gridFactor (vec2 vBC, float width, float feather) {\n            //     float w1 = width - feather * 0.5;\n            //     vec3 bary = vec3(vBC.x, vBC.y, 1.0 - vBC.x - vBC.y);\n            //     vec3 d = fwidth(bary);\n            //     vec3 a3 = smoothstep(d * w1, d * (w1 + feather), bary);\n            //    \n            //     return min(min(a3.x, a3.y), a3.z);\n            // }\n            \n            float gridFactor (vec2 vBC, float width) {\n                vec3 bary = vec3(vBC.x, vBC.y, 1.0 - vBC.x - vBC.y);\n                vec3 d = fwidth(bary);\n                vec3 a3 = smoothstep(d * (width - 0.5), d * (width + 0.5), bary);\n                \n                return min(min(a3.x, a3.y), a3.z);\n            }\n            \n            varying vec2 b;\n            \n            void main () {\n                gl_FragColor = vec4(vec3(gridFactor(b, 1.0) * .6), 1);\n            }`,\n        transparent: true,\n        extensions: {derivatives: true}\n    }\n}\n","import {DelaunayTriangulationBuilder} from \"jsts/org/locationtech/jts/triangulate\";\nimport {WKTReader} from \"jsts/org/locationtech/jts/io\";\nimport BufferOp from \"jsts/org/locationtech/jts/operation/buffer/BufferOp\";\nimport {Geometry, GeometryCollection, GeometryFactory} from \"jsts/org/locationtech/jts/geom\";\nimport \"jsts/org/locationtech/jts/monkey.js\";\nimport {BufferAttribute, BufferGeometry, LineCurve, Vector3} from \"three\";\nimport {CustomLine} from \"./test-geo\";\nimport {UnaryUnionOp} from \"jsts/org/locationtech/jts/operation/union\";\n\nfunction triangulationFromPolygon(polygon) {\n    const builder = new DelaunayTriangulationBuilder();\n\n    builder.setSites(polygon);\n    builder.setTolerance(.01);\n\n    let triangulation = builder.getTriangles(new GeometryFactory());\n\n    // console.log(triangulation);\n\n    return triangulation;\n}\n\nfunction polygonToBufferGeometry(polygon) {\n    const triangulation = triangulationFromPolygon(polygon);\n    return bufferFromTriangulation(triangulation);\n}\n\nfunction edgesFromTriangulation(triangulation) {\n    let vertexDict = {};\n    let vPairs = {};\n    let pureVertices = {};\n\n    for (const boundary in triangulation._geometries) {\n        const bnd = triangulation.getGeometryN(boundary);\n        const coords = bnd.getCoordinates();\n\n        if (coords.length === 4) {\n            let cMap = [0, 0, 0];\n            for (const idx in [0,1,2]) {\n                const coor = coords[idx];\n\n                let coordinate = JSON.stringify({x: coor.x, y: coor.y, z: .1});\n\n                const dictCount = Object.keys(vertexDict).length;\n\n                if (!(coordinate in vertexDict)) {\n                    // console.log(coordinate);\n\n                    vertexDict[coordinate] = dictCount;\n                    pureVertices[coordinate] = new Vector3(coor.x, coor.y, .1);\n                    cMap[idx] = dictCount;\n                } else {\n                    cMap[idx] = vertexDict[coordinate];\n                }\n            }\n\n            // console.log(cMap);\n\n            for (const idx in [0,1,2]) {\n                let a = cMap[idx];\n                let b = cMap[(idx + 1) % 3];\n\n                let v0 = Math.min(a, b);\n                let v1 = Math.max(a, b);\n\n                vPairs[JSON.stringify([v0, v1])] = [v0, v1];\n            }\n        }\n    }\n\n    let idxVertex = {};\n    for(const v in vertexDict){\n        const idx = vertexDict[v];\n        idxVertex[idx] = pureVertices[v];\n    }\n\n    let lines = [];\n\n    for (const idx in vPairs) {\n        // console.log(vPairs[idx]);\n\n        const a = vPairs[idx][0];\n        const b = vPairs[idx][1];\n\n        // console.log(vPairs);\n        // console.log(a, b);\n        // console.log(idxVertex[a], idxVertex[b]);\n\n        const localLineCurve = new LineCurve(idxVertex[a], idxVertex[b]);\n\n        // localLineCurve.arcLengthDivisions = 1;\n\n        lines.push(localLineCurve);\n    }\n\n    return lines;\n}\n\nfunction bufferFromTriangulation(triangulation) {\n    // let geoCollection = new GeometryCollection();\n\n    let bufferGeo = new BufferGeometry();\n    let coordinatesList = [];\n\n    for (const boundary in triangulation._geometries) {\n        const bnd = triangulation.getGeometryN(boundary);\n        const coords = bnd.getCoordinates();\n\n        if (coords.length === 4) {\n            for (const idx in [0,1,2]) {\n                const coor = coords[idx];\n                coordinatesList.push(coor.x);\n                coordinatesList.push(coor.y);\n                coordinatesList.push(.1);\n            }\n        }\n    }\n\n    const vertices = new Float32Array( coordinatesList );\n\n    bufferGeo.setAttribute( 'position', new BufferAttribute( vertices, 3 ) );\n    bufferGeo.computeVertexNormals();\n\n    return bufferGeo;\n}\n\nexport function createBuffer(geom, radius, segments = 32) {\n    return BufferOp.bufferOp(geom, radius, segments);\n}\n\nexport function displayPoint(aString) {\n    let reader = new WKTReader();\n\n    let pt = reader.read(aString);\n\n    let buffered = createBuffer(pt, 20);\n\n    const triangulation = triangulationFromPolygon(buffered);\n\n    return {\n        buffer: bufferFromTriangulation(triangulation),\n        edges: edgesFromTriangulation(triangulation)\n    };\n}\n\nexport function geometriesUnion(geos) {\n    if (geos.length === 1){\n        return geos[0];\n    }\n\n    const geoFac = new GeometryFactory();\n    const geoCollection = geoFac.createGeometryCollection(geos).union();\n\n    return geoCollection;\n}\n\nexport function geometriesDifference(geosA, geosB) {\n    return geosA.difference(geosB);\n}\n\nexport function geometriesIntersection(geosA, geosB) {\n    return geosA.intersection(geosB);\n}\n\nexport function readWKString(strings) {\n    const reader = new WKTReader();\n    const geos = [];\n\n    for (const aString of strings) {\n        geos.push(reader.read(aString));\n    }\n\n    return geos;\n}\n\nexport function geometryUnion(geos) {\n    const collection = geometriesUnion(geos);\n\n    return UnaryUnionOp.union(collection);\n}\n\nexport function multiplePoints(){\n    const strings = [\n        'POINT (-20 0)',\n        'POINT (20 0)',\n        'POINT (0 15)'\n    ];\n\n    const geos = readWKString(strings);\n    let bufferedGeos = [];\n\n    for (const geo of geos) {\n        bufferedGeos.push(BufferOp.bufferOp(geo, 30, 100));\n    }\n\n    const geom = geometryUnion(bufferedGeos);\n\n    return geom;\n}\n\nexport function triangulatePolyline(plg) {\n    const triangulation = triangulationFromPolygon(plg);\n\n    return {\n        buffer: bufferFromTriangulation(triangulation),\n        edges: edgesFromTriangulation(triangulation)\n    };\n}\n\nexport function testPolygon() {\n    // let reader = new WKTReader();\n    //\n    // const pt = reader.read('POINT (0 0)');\n    // const buffer = BufferOp.bufferOp(pt, 30)\n\n    return multiplePoints();\n}\n\nexport function displayPointTest(){\n    return triangulatePolyline(multiplePoints());\n}\n","import {Vector3} from \"three\";\nimport {Coordinate} from \"jsts/org/locationtech/jts/geom\";\n\nexport class ClayPoint {\n    origin;\n    direction;\n    position;\n    uvValue;\n\n    constructor(origin, direction) {\n        this.origin = origin;\n        this.position = new Vector3().copy(origin);\n        this.direction = direction;\n    }\n\n    move(value) {\n        this.position = new Vector3().addVectors(\n            this.position,\n            new Vector3().addScaledVector(this.direction, value)\n        );\n    }\n\n    set(value) {\n        this.position = new Vector3().addVectors(\n            this.origin,\n            new Vector3().addScaledVector(this.direction, value)\n        );\n    }\n\n    toCoordinate() {\n        return new Coordinate(\n            this.position.x,\n            this.position.y,\n            this.position.z\n        )\n    }\n\n    toVector3() {\n        return new Vector3(this.position.x, this.position.z, -this.position.y);\n    }\n}\n\nexport function clayPointTest() {\n    const vBase = new Vector3(0, 0, 0);\n    const vDir = new Vector3(1, 0, 0);\n\n    const clayPoint = new ClayPoint(vBase, vDir);\n\n    clayPoint.move(1.);\n\n    clayPoint.set(10.);\n}\n","import {Curve, Matrix4, Vector3} from \"three\";\nimport {clamp} from \"three/src/math/MathUtils\";\n\nexport class CustomSinCurve extends Curve {\n\n    constructor( scale = 1 ) {\n\n        super();\n\n        this.scale = scale;\n\n    }\n\n    getPoint( t, optionalTarget = new Vector3() ) {\n\n        const tx = t * 3 - 1.5;\n        const ty = Math.sin( 2 * Math.PI * t );\n        const tz = 0;\n\n        return optionalTarget.set( tx, ty, tz ).multiplyScalar( this.scale );\n    }\n}\n\nexport class CustomLine extends Curve {\n\n    constructor(v0, v1) {\n        super();\n\n        this.v0 = v0;\n        this.vDir = v1 - this.v0;\n\n        this.scale = 1.;\n    }\n\n    getPoint(t, optionalTarget = new Vector3()) {\n        const v = this.v0 + t * this.vDir;\n        // console.log(v);\n\n        return optionalTarget.set(v.x, v.y, v.z).multiplyScalar( this.scale );\n    }\n}\n\nexport class Polyline extends Curve {\n    constructor(points, closed = true) {\n        super();\n\n        this.points = points;\n        this.closed = closed;\n\n        this.init();\n    }\n\n    init() {\n        this.dirs = this.getDirs();\n\n        this.arcLengthDivisions = this.getPointCount();\n    }\n\n    getPointCount() {\n        if (this.closed) {\n            return this.points.length;\n        } else {\n            return this.points.length - 1;\n        }\n    }\n\n    getDirs() {\n        let dirList = [];\n\n        for (let i = 0; i < this.getPointCount(); i++) {\n            const v0 = this.points[i];\n            const v1 = this.points[(i+1) % this.getPointCount()];\n\n            const vDir = new Vector3().subVectors(v1, v0);\n\n            dirList.push(vDir);\n        }\n\n        return dirList;\n    }\n\n    getLength() {\n        const lengths = this.getLengths();\n        return lengths[lengths.length - 1];\n    }\n\n    getLengths() {\n        if ( this.cacheArcLengths &&\n            ( this.cacheArcLengths.length === this.getPointCount() + 1 ) &&\n            ! this.needsUpdate ) {\n\n            return this.cacheArcLengths;\n        }\n\n        let previous = 0.;\n        this.cacheArcLengths = [previous];\n\n        for (const dir of this.dirs) {\n            previous += dir.length();\n            this.cacheArcLengths.push(previous);\n        }\n\n        return this.cacheArcLengths;\n    }\n\n    getTangentAt(u, optionalTarget = new Vector3()) {\n        return this.getTangent(u * this.getPointCount(), optionalTarget)\n    }\n\n    getTangent(t, optionalTarget = new Vector3()) {\n        const locT = t % 1.;\n        let roundT = t - t % 1.;\n\n        if (isNaN(t)) {\n            return null;\n        }\n\n        let vT;\n\n        if (t > 0 && t < this.getPointCount()) {\n            if ( locT < .0001 ) {\n                const v1 = new Vector3().copy(this.dirs[roundT]);\n                const v0 = new Vector3().copy(this.dirs[roundT - 1]);\n\n                v0.normalize();\n                v1.normalize();\n\n                vT = new Vector3().addVectors(v0, v1);\n            } else {\n                vT = new Vector3().copy(this.dirs[roundT]);\n            }\n        }\n\n        if (this.closed) {\n            roundT %= this.getPointCount();\n\n            if ( locT < .0001 ) {\n                const v1 = new Vector3().copy(this.dirs[roundT]);\n                const v0 = new Vector3().copy(this.dirs[(roundT + this.getPointCount() - 1) % this.getPointCount()]);\n\n                v0.normalize();\n                v1.normalize();\n\n                vT = new Vector3().addVectors(v0, v1);\n            } else {\n                vT = new Vector3().copy(this.dirs[roundT]);\n            }\n        } else {\n            if (t < 1) {\n                vT = new Vector3().copy(this.dirs[0]);\n            } else {\n                vT = new Vector3().copy(this.dirs[this.dirs.length - 1]);\n            }\n        }\n\n        vT.normalize();\n        return optionalTarget.set(vT.x, vT.y, vT.z);\n    }\n\n    computeFrenetFrames( segments, closed ) {\n\n        // see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\n        const normal = new Vector3();\n\n        const tangents = [];\n        const normals = [];\n        const binormals = [];\n\n        const vec = new Vector3();\n        const mat = new Matrix4();\n\n        // compute the tangent vectors for each segment on the curve\n\n        for ( let i = 0; i <= segments; i ++ ) {\n\n            const u = i / segments;\n\n            tangents[ i ] = this.getTangentAt( u, new Vector3() );\n\n        }\n\n        // select an initial normal vector perpendicular to the first tangent vector,\n        // and in the direction of the minimum tangent xyz component\n\n        normals[ 0 ] = new Vector3();\n        binormals[ 0 ] = new Vector3();\n        let min = Number.MAX_VALUE;\n        const tx = Math.abs( tangents[ 0 ].x );\n        const ty = Math.abs( tangents[ 0 ].y );\n        const tz = Math.abs( tangents[ 0 ].z );\n\n        if ( tx <= min ) {\n\n            min = tx;\n            normal.set( 1, 0, 0 );\n\n        }\n\n        if ( ty <= min ) {\n\n            min = ty;\n            normal.set( 0, 1, 0 );\n\n        }\n\n        if ( tz <= min ) {\n\n            normal.set( 0, 0, 1 );\n\n        }\n\n        vec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n        normals[ 0 ].crossVectors( tangents[ 0 ], vec );\n        binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\n        // compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n        for ( let i = 1; i <= segments; i ++ ) {\n\n            normals[ i ] = normals[ i - 1 ].clone();\n\n            binormals[ i ] = binormals[ i - 1 ].clone();\n\n            vec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n            if ( vec.length() > Number.EPSILON ) {\n\n                vec.normalize();\n\n                const theta = Math.acos( clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n                normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n            }\n\n            binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n        }\n\n        // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n        if ( closed === true ) {\n\n            let theta = Math.acos( clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );\n            theta /= segments;\n\n            if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\n\n                theta = - theta;\n\n            }\n\n            for ( let i = 1; i <= segments; i ++ ) {\n\n                // twist a little...\n                normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n                binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n            }\n\n        }\n\n        // console.log({\n        //     tangents: tangents,\n        //     normals: normals,\n        //     binormals: binormals\n        // });\n\n        return {\n            tangents: tangents,\n            normals: normals,\n            binormals: binormals\n        };\n\n    }\n\n    _tConstraining(t) {\n        let locT = t % 1.;\n\n        let t0 = t - locT;\n\n        if (this.closed) {\n            t0 %= this.getPointCount();\n        } else {\n            if (t0 < 0) {\n                locT += t0;\n                t0 = 0;\n            } else if (t0 >= this.getPointCount()) {\n                locT += t0 - this.getPointCount();\n                t0 = this.getPointCount();\n            }\n        }\n\n        return {\n            locT: locT,\n            t0: t0\n        };\n    }\n\n    getPointAt(t, optionalTarget = new Vector3() ) {\n        return this.getPoint(t, optionalTarget);\n    }\n\n    getPoint( t, optionalTarget = new Vector3() ) {\n        t *= this.getPointCount();\n\n        const {locT, t0} = this._tConstraining(t);\n\n        const v0 = this.points[t0];\n        const vDir = this.dirs[t0];\n\n        const v = new Vector3().addVectors(v0, new Vector3().addScaledVector(vDir, locT));\n\n        return optionalTarget.set(v.x, v.y, v.z);\n    }\n\n    moveToHeight(height = 0.){\n        for (const point of this.points) {\n            point.y = height;\n        }\n    }\n\n    makeMeWave(periods = 2., amplitude = 5.) {\n        const step = (periods * 2. * Math.PI) / this.getPointCount();\n        let phase = 0.;\n\n        for (let i = 0; i < this.getPointCount(); i++ ) {\n            this.points[i].z += amplitude * Math.sin(phase);\n            phase += step;\n        }\n\n        this.init();\n    }\n\n    cadFlip() {\n        for (const pt of this.points) {\n            pt.set(pt.x, pt.z, -pt.y);\n        }\n    }\n}","import {GeometryFactory} from \"jsts/org/locationtech/jts/geom\";\nimport {ClayPoint} from './clay-point';\nimport {Vector3} from \"three\";\nimport {Polyline} from \"../three/three-poly-line\";\n\nexport class ClayPatternCurve {\n    clayPoints;\n\n    constructor(clayPoints) {\n        this.clayPoints = clayPoints;\n    }\n\n    toPolygon() {\n        let coordinates =[];\n\n        for (const pt of this.clayPoints) {\n            coordinates.push(pt.toCoordinate());\n        }\n\n        coordinates.push(coordinates[0]);\n\n        return new GeometryFactory().createPolygon(coordinates);\n    }\n\n    toPolyline() {\n        let positions = [];\n\n        for (const pt of this.clayPoints) {\n            positions.push(pt.toVector3());\n        }\n\n        return new Polyline(positions);\n    }\n\n    moveToHeight(height = 0.) {\n        for (const pt of this.clayPoints) {\n            pt.z = height;\n        }\n    }\n\n    applyPattern(patternFunction, parameters) {\n        if (parameters.uv) {\n            for (const pt of this.clayPoints) {\n                pt.set(patternFunction(pt.uvValue, parameters));\n            }\n        } else {\n            for (const pt of this.clayPoints) {\n                pt.set(patternFunction(pt.origin, parameters));\n            }\n        }\n    }\n\n    toThreePolyline() {\n        let positions = [];\n\n        for (const pt of this.clayPoints) {\n            positions.push(pt.toVector3());\n        }\n\n        return new Polyline(positions);\n    }\n}\n\nexport function testClayCurve(scene = null) {\n    let pts = [\n        new ClayPoint(\n            new Vector3(.5, .5, 0),\n            new Vector3(1, 1, 0),\n        ),\n        new ClayPoint(\n            new Vector3(-.5, .5, 0),\n            new Vector3(-1, 1, 0),\n        ),\n        new ClayPoint(\n            new Vector3(-.5, -.5, 0),\n            new Vector3(-1, -1, 0),\n        ),\n        new ClayPoint(\n            new Vector3(.5, -.5, 0),\n            new Vector3(1, -1, 0),\n        ),\n    ];\n\n    const clayCurve = new ClayPatternCurve(pts);\n\n    if (scene) {\n        // console.log(\"is not null?\");\n        // console.log(scene);\n\n\n\n    } else {\n        console.log(\"is null !!!\");\n    }\n}\n","import {GeometryFactory} from \"jsts/org/locationtech/jts/geom\";\nimport {Path, Vector3} from \"three\";\nimport {Polyline} from \"../three/three-poly-line\";\nimport {testPolygon} from \"../importing-jsts\";\n\nconst llr = new GeometryFactory().createLinearRing();\n\nfunction getLinearRings(polygon) {\n    let linearRings = [];\n    linearRings.push(polygon.getExteriorRing());\n\n    // console.log(polygon);\n\n    for (let i = 0; i < polygon.getNumInteriorRing(); i++) {\n        linearRings.push(polygon.getInteriorRingN(i));\n    }\n\n    return linearRings;\n}\n\nfunction vectorFromCoordinate(coordinate) {\n    let locZ;\n\n    if (isNaN(coordinate.z)) {\n        locZ = 0;\n    } else {\n        locZ = coordinate.z;\n    }\n\n    return new Vector3(\n        coordinate.x,\n        locZ,\n        -coordinate.y\n    );\n}\n\nfunction linearRingToPolyline(linearRing) {\n    let vectors = [];\n\n    for (const coordinate of linearRing.getCoordinates()) {\n        vectors.push(vectorFromCoordinate(coordinate) );\n    }\n\n    vectors.pop();\n\n    return new Polyline(vectors);\n}\n\nexport function polygonToPolylines(polygon){\n    let polylines = [];\n\n    if (polygon.constructor.name === \"MultiPolygon\") {\n        for (const pg of polygon._geometries) {\n            for (const pl of polygonToPolylines(pg)){\n                polylines.push(pl);\n            }\n        }\n\n        return polylines;\n    }\n\n    const lrs = getLinearRings(polygon);\n\n    for (const lr of lrs){\n        polylines.push(linearRingToPolyline(lr));\n    }\n\n    return polylines;\n}\n","import {GeometryFactory} from \"jsts/org/locationtech/jts/geom\";\nimport Coordinate from \"jsts/org/locationtech/jts/geom/Coordinate\";\n\nfunction vector3toCoordinate(vector3) {\n    return new Coordinate(vector3.x, vector3.y, vector3.z);\n}\n\nfunction coordinatesFromPolyline(polyline) {\n    let coordinates = [];\n\n    for (const pt of polyline.points) {\n        coordinates.push(vector3toCoordinate(pt));\n    }\n\n    coordinates.push(coordinates[0]);\n\n    return coordinates;\n}\n\nexport function polylineToPolygon(polyline) {\n    const geoFactory = new GeometryFactory();\n\n    let coordinates = [];\n\n    const polygon = geoFactory.createPolygon(coordinatesFromPolyline(polyline));\n\n    return polygon;\n};","// defining base parameters\n// all lengths are in mm\n// base height, width\n\nimport {ClayPatternCurve} from \"./clay-pattern-curve\";\nimport {Polyline} from \"../three/three-poly-line\";\nimport {ClayPoint} from \"./clay-point\";\nimport {polylineToPolygon} from \"../jsts2Three/three-to-jsts\";\nimport {createBuffer, geometriesDifference, geometriesIntersection, geometryUnion} from \"../importing-jsts\";\nimport {polygonToPolylines} from \"../jsts2Three/jsts-to-three\";\nimport {Vector2, Vector3} from \"three\";\n// import {DEFAULT_SIN_WAVE_UV_PARAMETERS, sinWaveUVPattern} from \"./clay-patterns\";\n\nlet productionWidth = 2.5;\n\nlet baseWidth = 150.0;\nlet baseLength = 300.0; // always needs to be at least the same length as the brick's width\nlet lengthBufferMultiplier = 2.0;\n\nlet pinSpacing = 220.0;\nlet diamondWidth = 50.0;\nlet diamondHeight = 110.0;\nlet diamondCount = 3;\n\nlet pinDiameter0 = 40.0;\nlet pinDiameter1 = 20.0;\nlet pinDelta = 250.0;\nlet pinDiameterDelta = (pinDiameter1 - pinDiameter0) / pinDelta;\nlet pinDivisions = 60;\n\nlet precision = 2.5;\n\nlet bodyHeight = 160.0;\nlet totalHeight = 260.0;\nlet startHeight = -100.0;\nlet layerHeight = 2.5;\n\nlet patternFunction, patternParameters;\n\nlet v0, v1;\n\nfunction pinRadiusAtHeight(height) {\n    // console.log(pinDiameterDelta, height, pinDiameter0);\n    return pinDiameterDelta * height + pinDiameter0;\n}\n\nfunction arcClayPt(i, startPhase, angleDelta, radius, basePoint, vVal = 0.) {\n    const baseAngle = angleDelta * i;\n    const angle = startPhase + baseAngle;\n\n    const x0 = Math.cos(angle);\n    const y0 = Math.sin(angle);\n\n    const x = radius * x0;\n    const y = radius * y0;\n\n    const clayPoint = new ClayPoint(\n        new Vector3(basePoint.x + x, basePoint.y + y, basePoint.z),\n        new Vector3(x0, y0, 0)\n    );\n\n    clayPoint.uvValue = new Vector2(vVal + baseAngle * radius, basePoint.z);\n\n    return clayPoint\n}\n\nfunction arcDivisions(radius, goalLength, arcAngle, startPhase, basePoint, clayPoints, vVal = 0.) {\n    const count = Math.ceil(arcAngle * radius / goalLength);\n    const angleDelta = arcAngle / count;\n\n    for (let i = 0; i < count; i++) {\n        const clayPoint = arcClayPt(i, startPhase, angleDelta, radius, basePoint, vVal);\n        clayPoints.push(clayPoint);\n    }\n\n    return arcAngle * radius + vVal;\n}\n\nfunction lineDivisions(v0, v1, goalLength, clayPoints, vVal = 0.) {\n    const length = v0.distanceTo(v1);\n    const count = Math.ceil( length / goalLength);\n\n    const delta = new Vector3().addScaledVector(\n        new Vector3().subVectors(v1, v0),\n        1. / count\n    );\n\n    const deltaLength = delta.length();\n\n    const normal = new Vector3(delta.y / deltaLength, -delta.x / deltaLength);\n\n    for (let i = 0; i < count; i++) {\n        const v = new Vector3().addVectors(\n            v0,\n            new Vector3().addScaledVector(delta, i)\n        );\n\n        const clayPoint = new ClayPoint(v, normal);\n        clayPoint.uvValue = new Vector2(vVal + i * deltaLength, v0.z);\n        clayPoints.push(clayPoint);\n    }\n\n    return length + vVal;\n}\n\nexport function outerProfile(height = 0.) {\n    const v0 = new Vector3(-(baseLength - baseWidth) * .5, 0.0, height);\n    const v1 = new Vector3((baseLength - baseWidth) * .5, 0.0, height);\n\n    let clayPoints = [];\n\n    let vVal = 0.;\n\n    vVal = arcDivisions(baseWidth * .5, precision, .5 * Math.PI, Math.PI, v0, clayPoints, vVal);\n\n    const p0 = new Vector3(-(baseLength - baseWidth) * .5, -baseWidth * .5, height);\n    const p1 = new Vector3((baseLength - baseWidth) * .5, -baseWidth * .5, height);\n\n    vVal = lineDivisions(p0, p1, precision, clayPoints, vVal);\n\n    vVal = arcDivisions(baseWidth * .5, precision, Math.PI, -.5 *Math.PI, v1, clayPoints, vVal);\n\n    const p2 = new Vector3((baseLength - baseWidth) * .5, baseWidth * .5, height);\n    const p3 = new Vector3(-(baseLength - baseWidth) * .5, baseWidth * .5, height);\n\n    vVal = lineDivisions(p2, p3, precision, clayPoints, vVal);\n\n    arcDivisions(baseWidth * .5, precision, .5 * Math.PI, .5 * Math.PI, v0, clayPoints, vVal);\n\n    const clayPolyline = new ClayPatternCurve(clayPoints);\n\n    return clayPolyline;\n}\n\nfunction simpleLineDivison(v0, v1, divisions, withEnds = false) {\n    const delta = new Vector3().addScaledVector(\n        new Vector3().subVectors(v1, v0),\n        1. / divisions\n    );\n\n    let vs = [];\n\n    let start = 0;\n    let end = divisions + 1;\n\n    if (!withEnds) {\n        start = 1;\n        end = divisions;\n    }\n\n    for (let i = start; i < end; i++) {\n        const v = new Vector3().addVectors(\n            v0,\n            new Vector3().addScaledVector(delta, i)\n        );\n\n        vs.push(v);\n    }\n\n    return vs;\n}\n\nfunction simpleArcDivision(baseV, radius, arcAngle = Math.PI, startPhase = 0., division = 100) {\n    const delta = arcAngle / division;\n\n    let vs = [];\n\n    for (let i = 0; i < division; i++) {\n        const angle = startPhase + i * delta;\n\n        const x = radius * Math.cos(angle);\n        const y = radius * Math.sin(angle);\n\n        vs.push(new Vector3(baseV.x + x, baseV.y + y, 0));\n    }\n\n    return new Polyline(vs);\n}\n\nfunction diamondPolyline(bPoint) {\n    return new Polyline([\n        new Vector3(bPoint.x + diamondWidth * .5, bPoint.y, 0),\n        new Vector3(bPoint.x, bPoint.y + diamondHeight * .5, 0),\n        new Vector3(bPoint.x - diamondWidth * .5, bPoint.y, 0),\n        new Vector3(bPoint.x, bPoint.y - diamondHeight * .5, 0)\n    ]);\n}\n\nfunction rectangle(bPoint, width, height) {\n    return new Polyline([\n        new Vector3(bPoint.x + width * .5, bPoint.y + .5 * height, 0),\n        new Vector3(bPoint.x - width * .5, bPoint.y + .5 * height, 0),\n        new Vector3(bPoint.x - width * .5, bPoint.y - .5 *  height, 0),\n        new Vector3(bPoint.x + width * .5, bPoint.y - .5 *  height, 0)\n    ]);\n}\n\nexport function innerProfileGeom(height = 0.) {\n\n    const diamondVs = simpleLineDivison(v0, v1, diamondCount + 1, false);\n\n    let pls = [];\n\n    for (const diamondV of diamondVs) {\n        const diamond = diamondPolyline(diamondV);\n        const diamondRect = rectangle(diamondV, productionWidth, baseWidth * lengthBufferMultiplier);\n\n        pls.push(diamond);\n        pls.push(diamondRect);\n    }\n\n    const pinDiameter = pinRadiusAtHeight(height);\n\n    pls.push(simpleArcDivision(v0, pinDiameter * .5, 2. * Math.PI, 0., pinDivisions));\n    pls.push(simpleArcDivision(v1, pinDiameter * .5, 2. * Math.PI, 0., pinDivisions));\n    pls.push(rectangle(v0, productionWidth, baseWidth * lengthBufferMultiplier));\n    pls.push(rectangle(v1, productionWidth, baseWidth * lengthBufferMultiplier));\n    pls.push(rectangle(new Vector3(0, 0, 0),baseLength + baseWidth * (lengthBufferMultiplier - 1.), productionWidth));\n\n    let polygons = [];\n    for (const pl of pls){\n        polygons.push(polylineToPolygon(pl));\n    }\n\n    const geom = geometryUnion(polygons);\n\n    return geom;\n}\n\nexport function innerProfile(height = 0.) {\n    const geom = innerProfileGeom(height);\n\n    const polylines = polygonToPolylines(geom);\n\n    for (const pl of polylines) {\n        pl.moveToHeight(height);\n    }\n\n    return polylines;\n}\n\nexport function aSlice(height = 0.) {\n    const outerClayCurve = outerProfile(height);\n\n    // console.log(outerClayCurve);\n\n    // need to apply a certain pattern logic to it\n    // no pattern for now!\n    outerClayCurve.applyPattern(patternFunction, patternParameters);\n\n    const outerGeom = outerClayCurve.toPolygon();\n\n    const bufferedOuterGeom = createBuffer(outerGeom, -productionWidth, 1);\n\n    const recL = (baseLength + baseWidth * (lengthBufferMultiplier - 1.)) * .5;\n\n    // console.log(recL);\n\n    const leftRec = rectangle(\n        new Vector3(-recL * .5, 0, 0),\n        recL,\n        productionWidth\n    );\n\n    // console.log(leftRec);\n\n    const leftRecPg = polylineToPolygon(leftRec);\n    const unionOuterGeom = geometryUnion([bufferedOuterGeom, leftRecPg])\n\n    const innerGeom = innerProfileGeom(height);\n\n    const geom = geometriesIntersection(unionOuterGeom, innerGeom);\n\n    const path = geometriesDifference(outerGeom, geom)\n\n    let polylines = polygonToPolylines(path);\n\n    return polylines;\n}\n\nfunction aPinOnlySlice(height) {\n    let pls = [];\n\n    const pinDiameter = pinRadiusAtHeight(height);\n\n    const arcA = simpleArcDivision(v0, pinDiameter * .5, 2. * Math.PI, 0., pinDivisions);\n    const arcB = simpleArcDivision(v1, pinDiameter * .5, 2. * Math.PI, 0., pinDivisions);\n\n    arcA.cadFlip();\n    arcB.cadFlip();\n\n    pls.push(arcA);\n    pls.push(arcB);\n\n    return pls;\n}\n\nfunction readingOverwrites(overwrites) {\n    productionWidth = overwrites.productionWidth;\n    baseWidth = overwrites.baseWidth;\n    baseLength = overwrites.baseLength;\n    lengthBufferMultiplier = overwrites.lengthBufferMultiplier;\n    pinSpacing = overwrites.pinSpacing;\n    diamondWidth = overwrites.diamondWidth;\n    diamondHeight = overwrites.diamondHeight;\n    diamondCount = overwrites.diamondCount;\n    pinDiameter0 = overwrites.pinDiameter0;\n    pinDiameter1 = overwrites.pinDiameter1;\n    pinDelta = overwrites.pinDelta;\n    pinDivisions = overwrites.pinDivisions;\n    precision = overwrites.precision;\n    bodyHeight = overwrites.bodyHeight;\n    totalHeight = overwrites.totalHeight;\n    startHeight = overwrites.startHeight;\n    layerHeight = overwrites.layerHeight;\n    patternFunction = overwrites.pattern.patternFunction;\n    patternParameters = overwrites.pattern.patternParameters;\n}\n\nexport function constructBrick(overwrites) {\n    v0 = new Vector3(-pinSpacing * .5, 0.0);\n    v1 = new Vector3(pinSpacing * .5, 0.0);\n\n    readingOverwrites(overwrites);\n\n    pinDiameterDelta = (pinDiameter1 - pinDiameter0) / pinDelta\n\n    let polylines = [];\n\n    let localH = 0.;\n    for (localH; localH < bodyHeight; localH += layerHeight) {\n\n        for (const pl of aSlice(localH)) {\n            pl.moveToHeight(localH + startHeight);\n            polylines.push(pl);\n        }\n    }\n\n    for (localH; localH < totalHeight; localH += layerHeight) {\n        for (const pl of aPinOnlySlice(localH)) {\n            pl.moveToHeight(localH + startHeight);\n            polylines.push(pl);\n        }\n    }\n\n    return polylines;\n}\n\n","import {\n    Curve,\n    // EdgesGeometry,\n    // CurveLine,\n    // LineBasicMaterial,\n    // LineSegments,\n    Matrix4,\n    Mesh,\n    ShaderMaterial,\n    // Vector2,\n    Vector3\n} from \"three\";\nimport {SpecialTubeGeo, TubeGeo} from \"./to-three\";\nimport {shaders} from \"./shaders-materials\";\nimport {displayPointTest, testPolygon} from \"./importing-jsts\";\nimport {clayPointTest} from \"./clayBrick/clay-point\";\nimport {testClayCurve} from \"./clayBrick/clay-pattern-curve\";\nimport {polygonToPolylines} from \"./jsts2Three/jsts-to-three\";\nimport {aSlice, constructBrick, innerProfile, outerProfile} from \"./clayBrick/clay-simple-base\";\nimport {CustomSinCurve} from \"./three/three-poly-line\";\n\nfunction shaderMaterialEdges() {\n    return new ShaderMaterial( shaders.grid );\n}\n\nexport function shaderNormal() {\n    return new ShaderMaterial(shaders.normalShader);\n}\n\nexport function testTube() {\n    // const material = new MeshBasicMaterial( { color: 0xff2211 } );\n    const material = shaderMaterialEdges();\n    const path = new CustomSinCurve( 10 );\n\n    return TubeGeo(path, 100, 2., 32, false, material);\n}\n\nexport function testJSTSTriangulation(scene) {\n    const {buffer, edges} = displayPointTest();\n    const material = shaderMaterialEdges();\n\n    const mesh = new Mesh(buffer, material);\n\n    const blWhiteShader = new ShaderMaterial(shaders.normalShader);\n\n    for (const line in edges) {\n        const aLine = edges[line];\n\n        // console.log(aLine);\n\n        const locTubeGeo = TubeGeo(aLine, 32, .5, 32, false, blWhiteShader);\n\n        // console.log(locTubeGeo);\n        scene.add(locTubeGeo);\n    }\n\n    scene.add(mesh);\n}\n\nexport function geoTubeTest() {\n    const polygon = testPolygon();\n    const pls = polygonToPolylines(polygon);\n\n    const blWhiteShader = new ShaderMaterial(shaders.normalShader);\n\n    let tubes = [];\n    for (const pl of pls) {\n        pl.makeMeWave(4., 10.);\n        tubes.push(TubeGeo(pl, pl.getPointCount(), .5, 6, false, blWhiteShader))\n    }\n\n    return tubes;\n}\n\nexport function addTestGeos(scene) {\n    for (const pl of constructBrick()) {\n        const locTubeGeo = TubeGeo(pl, pl.getPointCount(), 1.5, 6, false, shaderNormal());\n        scene.add(locTubeGeo);\n    }\n}\n","import {WebGL1Renderer, WebGLRenderer} from 'three'\n\nexport function getPlanarRenderer() {\n    const renderer = new WebGLRenderer({antialias: true});\n\n    renderer.setClearColor('#cdd0d6');\n    renderer.setPixelRatio(window.devicePixelRatio);\n\n    return renderer;\n}\n\nexport function getPerspectiveRenderer() {\n    const renderer = new WebGL1Renderer({antialias: true, alpha: true})\n\n    // renderer.setClearColor('#ffff99');\n    renderer.setPixelRatio(window.devicePixelRatio);\n\n    return renderer;\n}\n\nexport function resize(mount, renderer, camera) {\n    if (!mount || !renderer || !camera)\n        return\n\n    const {clientWidth, clientHeight} = mount.current\n\n    if (camera) {\n        camera.aspect = clientWidth / clientHeight;\n        camera.updateProjectionMatrix();\n    }\n\n    renderer.setSize(clientWidth, clientHeight)\n}\n","export function start(renderer, scene, camera) {\n\n    const frameId = {frameId: null};\n\n    frameId.frameId = requestAnimationFrame(() => animate(renderer, scene, camera, frameId));\n\n    return frameId;\n}\n\nexport function stop({frameId}) {\n    return cancelAnimationFrame(frameId);\n}\n\nfunction animate(renderer, scene, camera, frameId) {\n    renderer.clear('#ddd');\n    renderer.render(scene, camera);\n\n    frameId.frameId = requestAnimationFrame(() => animate(renderer, scene, camera, frameId));\n}\n","export function sinWaveUVPattern(uv, parameters){\n    const phase = parameters.phaseDelta * uv.y;\n    return Math.sin(uv.x * parameters.frequency + phase) * parameters.amplitude + parameters.offset;\n}\n\nexport const DEFAULT_SIN_WAVE_UV_PARAMETERS = {\n    amplitude: 2.,\n    frequency: 2. * Math.PI / 30.0,\n    phaseDelta: 0.,\n    offset: 5.,\n    uv: true\n};","import {constructBrick} from \"../clayBrick/clay-simple-base\";\nimport {TubeGeo} from \"../to-three\";\nimport {shaderNormal} from \"../test-geo\";\nimport {DEFAULT_SIN_WAVE_UV_PARAMETERS, sinWaveUVPattern} from \"../clayBrick/clay-patterns\";\n\nexport let overwrites = {\n    productionWidth: 2.5,\n    baseWidth: 150.0,\n    baseLength: 300.0, // always needs to be at least the same length as the brick's width\n    lengthBufferMultiplier: 2.0,\n    pinSpacing: 220.0,\n    diamondWidth: 50.0,\n    diamondHeight: 110.0,\n    diamondCount: 3,\n    pinDiameter0: 40.0,\n    pinDiameter1: 20.0,\n    pinDelta: 250.0,\n    pinDivisions: 60,\n    precision: 2.5,\n    bodyHeight: 160.0,\n    totalHeight: 260.0,\n    startHeight: -100.0,\n    layerHeight: 2.5,\n    pattern: {\n        patternFunction: sinWaveUVPattern,\n        patternParameters: DEFAULT_SIN_WAVE_UV_PARAMETERS\n    }\n}\n\nexport function patternMapping(patternName) {\n    switch (patternName) {\n        case \"sinWave\":\n            return sinWaveUVPattern;\n        default:\n            return sinWaveUVPattern;\n    }\n}\n\nexport function addBrick(scene) {\n    scene.children = [];\n\n    for (const pl of constructBrick(overwrites)) {\n        const locTubeGeo = TubeGeo(pl, pl.getPointCount(), 1.5, 6, false, shaderNormal());\n        scene.add(locTubeGeo);\n    }\n}","import {Scene} from 'three';\nimport {getPerspectiveRenderer, resize} from \"./renderers\";\nimport {getOrbitControls} from \"./orbit-controls\";\nimport {getPerspectiveCamera} from \"./cameras\";\nimport {start, stop} from \"./render-loops\";\nimport {addTestGeos, testTube} from \"../geometry/test-geo\";\nimport {displayPointTest} from \"../geometry/importing-jsts\";\nimport {addBrick} from \"../geometry/three/brick-to-scene\";\n\nexport function setUp(mount) {\n    const scene = new Scene();\n\n    addBrick(scene);\n\n    displayPointTest();\n\n    const renderer = getPerspectiveRenderer();\n    mount.current.appendChild(renderer.domElement);\n\n    const camera = getPerspectiveCamera(mount.current);\n    scene.add(camera);\n\n    const orbitControls = getOrbitControls(camera, renderer);\n\n    resize(mount, renderer, camera);\n    const frameId = start(renderer, scene, camera);\n\n    return {\n        scene: scene,\n        renderer: renderer,\n        camera: camera,\n        frameId: frameId,\n        orbitControls: orbitControls\n    };\n}\n\nexport function cleanUp(mount, renderer, frameId) {\n    stop(frameId.frameId);\n    mount.current.removeChild(renderer.domElement);\n}\n","import {OrthographicCamera, PerspectiveCamera} from 'three'\n\nexport function getOrthographicCamera(mount) {\n    const {clientWidth, clientHeight} = mount;\n\n    const camera = new OrthographicCamera(\n        clientWidth / -16,\n        clientWidth /16,\n        clientHeight / 16,\n        clientHeight / -16,\n        -1,\n        100\n    );\n\n    camera.enableRotate = false;\n    camera.position.z = 20;\n\n    return camera;\n}\n\nexport function getPerspectiveCamera(mount) {\n    const {clientWidth, clientHeight} = mount;\n\n    const camera = new PerspectiveCamera(\n        45,\n        clientWidth / clientHeight\n    );\n\n    camera.position.z = 500;\n    return camera;\n}\n","import {MOUSE} from 'three';\nimport {OrbitControls} from \"three/examples/jsm/controls/OrbitControls\";\n\nexport function getOrbitControls(camera, renderer) {\n    const orbitControls = new OrbitControls(camera, renderer.domElement);\n    orbitControls.enableRotate = true;\n    orbitControls.enableKeys = true;\n    // orbitControls.minZoom = .5;\n    // orbitControls.maxZoom = 8;\n    // orbitControls.mouseButtons = {ZOOM: MOUSE.MIDDLE, PAN: MOUSE.RIGHT};\n\n    orbitControls.target.set(0, 0);\n    orbitControls.update();\n\n    return orbitControls;\n}\n\n","import React, {useEffect, useRef} from 'react';\nimport Measure from 'react-measure';\nimport {cleanUp, setUp} from \"./three-setup/set-up\";\nimport {resize} from \"./three-setup/renderers\";\nimport {GUI} from 'three/examples/jsm/libs/dat.gui.module';\nimport {createGUI} from \"./three-setup/gui-setup\";\n\nimport './Viewer.scss';\n\nfunction Viewer() {\n    const mount = useRef(null);\n    const rendererRef = useRef(null);\n    const cameraRef = useRef(null);\n\n    let gui;\n\n\n    useEffect(() => {\n        console.log(mount);\n\n        const {scene, camera, renderer, frameId} = setUp(mount);\n\n        rendererRef.current = renderer;\n        cameraRef.current = camera;\n\n        gui = createGUI(scene);\n\n        return () => {\n            cleanUp(mount, renderer, frameId);\n        }\n    }, [rendererRef, cameraRef]);\n\n    return (\n        <Measure\n            bounds\n            onResize={() => {\n                resize(mount, rendererRef.current, cameraRef.current)\n            }}>\n            {({measureRef}) => (\n                <div className={'simple-3d'} ref={measureRef}>\n                    <div className={'three-canvas'} ref={mount} tabIndex={0}/>\n                </div>\n            )}\n        </Measure>\n    )\n}\n\nexport default Viewer;\n","import {GUI} from \"three/examples/jsm/libs/dat.gui.module\";\nimport {USDZExporter} from \"three/examples/jsm/exporters/USDZExporter\";\n\nexport function createGUI(scene) {\n    const gui = new GUI();\n\n    const exportUSDZ = { usdz:function(){\n        console.log(\"export USDZ !?\");\n\n        // const exporter = new USDZExporter();\n        // const arrayBuffer = exporter.parse( scene, function ( ucsd ) {\n        //     console.log(ucsd);\n        //     console.log(\"nothing ?\");\n        //\n        // }, {} );\n        //\n        // const blob = new Blob( [ arrayBuffer ], { type: 'application/octet-stream' } );\n        //\n        // // console.log(ucsd);\n        // console.log(document);\n        //\n        // const link = document.getElementById( 'link' );\n        //\n        // console.log(link);\n        //\n        // link.href = URL.createObjectURL( blob );\n\n    }};\n\n    gui.add(exportUSDZ,'usdz');\n\n    return gui;\n}\n","// ... App.js\nimport React, {Component} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport {TestGeo} from \"./geometry/test-geo\";\nimport {setUp} from \"./three-setup/set-up\";\n\nimport './App.css';\nimport Viewer from \"./Viewer\";\n\nfunction App() {\n    return (\n        <div className={'app'}>\n            <div className={'container'}>\n                <Viewer/>\n            </div>\n            <a id=\"link\" rel=\"ar\" href=\"\" download=\"asset.usdz\">\n                <img id=\"button\" width=\"100\" src=\"files/arkit.png\"></img>\n            </a>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}